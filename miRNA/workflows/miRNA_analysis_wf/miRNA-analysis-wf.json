{
  "sbg:modifiedBy": "dave",
  "sbg:image_url": "https://brood.sbgenomics.com/static/dave/cgrrna/mirna-analysis-wf-BATCH/0.png",
  "sbg:canvas_y": 126,
  "sbg:copyOf": "mia.steinberg/mirna-analysis/mirna-analysis-wf-BATCH/2",
  "sbg:id": "dave/cgrrna/mirna-analysis-wf-BATCH/0",
  "requirements": [],
  "sbg:canvas_x": 63,
  "hints": [],
  "sbg:createdBy": "dave",
  "label": "miRNA Analysis WF BATCH",
  "sbg:revisionsInfo": [
    {
      "sbg:modifiedBy": "dave",
      "sbg:revision": 0,
      "sbg:revisionNotes": "Copy of mia.steinberg/mirna-analysis/mirna-analysis-wf-BATCH/2",
      "sbg:modifiedOn": 1479085365
    }
  ],
  "sbg:sbgMaintained": false,
  "sbg:canvas_zoom": 0.5999999999999996,
  "sbg:project": "dave/cgrrna",
  "sbg:revision": 0,
  "sbg:validationErrors": [],
  "id": "https://api.sbgenomics.com/v2/apps/dave/cgrrna/mirna-analysis-wf-BATCH/0/raw/",
  "sbg:modifiedOn": 1479085365,
  "sbg:latestRevision": 0,
  "sbg:createdOn": 1479085365,
  "inputs": [
    {
      "label": "adapter",
      "sbg:y": 465.28508112980796,
      "type": [
        "null",
        "File"
      ],
      "id": "#adapter",
      "sbg:fileTypes": "FA",
      "sbg:x": 72.42533757136422
    },
    {
      "label": "bowtie_index",
      "sbg:y": 637.7376145582936,
      "type": [
        "null",
        {
          "type": "array",
          "items": "File",
          "name": "bowtie_index"
        }
      ],
      "id": "#bowtie_index",
      "sbg:fileTypes": "EWBT, FA, FAI",
      "sbg:x": 86.78733238807095
    },
    {
      "label": "reference_genome",
      "sbg:y": 812.7602445162263,
      "type": [
        "null",
        "File"
      ],
      "id": "#reference_genome",
      "sbg:fileTypes": "FA, FASTA",
      "sbg:x": 63.167419433593786
    },
    {
      "label": "mature",
      "sbg:y": 957.3755821814908,
      "type": [
        "null",
        "File"
      ],
      "id": "#mature",
      "sbg:fileTypes": "FA, FASTA",
      "sbg:x": 53.03165729229269
    },
    {
      "label": "hairpin",
      "sbg:y": 1117.375582181491,
      "type": [
        "null",
        "File"
      ],
      "id": "#hairpin",
      "sbg:fileTypes": "FA, FASTA",
      "sbg:x": 81.26696073091952
    },
    {
      "label": "hg19_genome",
      "sbg:y": 75.38461538461542,
      "type": [
        "File"
      ],
      "id": "#genome",
      "sbg:fileTypes": "TAR",
      "sbg:x": 67.69233116736783
    },
    {
      "label": "fastq",
      "sbg:y": 284.6153846153848,
      "type": [
        "null",
        "File"
      ],
      "id": "#fastq",
      "sbg:fileTypes": "FASTQ.GZ",
      "sbg:x": 70.7692354642429
    }
  ],
  "description": "",
  "class": "Workflow",
  "sbg:revisionNotes": "Copy of mia.steinberg/mirna-analysis/mirna-analysis-wf-BATCH/2",
  "outputs": [
    {
      "sbg:includeInPorts": true,
      "label": "FASTQC_report",
      "sbg:y": 670.4072159987232,
      "required": false,
      "source": [
        "#FastQC_Analysis.b64html"
      ],
      "type": [
        "null",
        "File"
      ],
      "id": "#b64html",
      "sbg:x": 1571.0406963641835
    },
    {
      "sbg:includeInPorts": true,
      "label": "hg19_star_log_files",
      "sbg:y": 310.7692072941708,
      "required": false,
      "source": [
        "#RNA_seq_Alignment___STAR.log_files"
      ],
      "type": [
        "null",
        {
          "type": "array",
          "items": "File"
        }
      ],
      "id": "#log_files",
      "sbg:x": 1627.6923076923083
    },
    {
      "sbg:includeInPorts": true,
      "label": "miRDeep_result_report",
      "sbg:y": 881.5385554387024,
      "required": false,
      "source": [
        "#mirdeep_core.miRDeep_result_report"
      ],
      "type": [
        "null",
        "File"
      ],
      "id": "#miRDeep_result_report",
      "sbg:x": 1624.6153846153854
    },
    {
      "sbg:includeInPorts": true,
      "label": "miRDeep_expression_report",
      "sbg:y": 1138.461538461539,
      "required": false,
      "source": [
        "#mirdeep_core.miRDeep_expression_report"
      ],
      "type": [
        "null",
        "File"
      ],
      "id": "#miRDeep_expression_report",
      "sbg:x": 1632.3076923076933
    },
    {
      "sbg:includeInPorts": true,
      "label": "cutadapt_log",
      "sbg:y": 475.0000000000003,
      "required": false,
      "source": [
        "#cutadapt.cutadapt_log"
      ],
      "type": [
        "null",
        "File"
      ],
      "id": "#cutadapt_log",
      "sbg:x": 1636.6668701171884
    }
  ],
  "steps": [
    {
      "sbg:y": 697.7051250751206,
      "run": {
        "sbg:modifiedBy": "mia.steinberg",
        "sbg:image_url": null,
        "sbg:id": "mia.steinberg/mirna-analysis/mirdeep2-mapper/1",
        "x": 662.6153564453128,
        "temporaryFailCodes": [],
        "hints": [
          {
            "value": 4,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 96000,
            "class": "sbg:MemRequirement"
          },
          {
            "dockerImageId": "",
            "dockerPull": "miasteinberg/mirdeep2:0.0.8",
            "class": "DockerRequirement"
          }
        ],
        "stdin": "",
        "sbg:createdBy": "mia.steinberg",
        "arguments": [
          {
            "separate": true,
            "position": 4,
            "valueFrom": "-e -h -q -m -u -v"
          },
          {
            "separate": true,
            "position": 6,
            "prefix": "-r",
            "valueFrom": "5"
          },
          {
            "separate": true,
            "position": 10,
            "prefix": "-p",
            "valueFrom": {
              "class": "Expression",
              "script": "name = $job.inputs.bowtie_index[0].path.split(\"/\").slice(-1)[0]\nbasename = name.split(\".\")\nif (basename.slice(-3,-2)[0]==='rev'){\n\tbasename.slice(0,basename.length-3).join(\".\")\n}\nelse{\n\tbasename.slice(0,basename.length-2).join(\".\")\n}",
              "engine": "#cwl-js-engine"
            }
          },
          {
            "separate": true,
            "position": 11,
            "prefix": "-s",
            "valueFrom": "S6.reads.fa"
          },
          {
            "separate": true,
            "position": 12,
            "prefix": "-t",
            "valueFrom": "S6.reads_vs_genome.arf"
          },
          {
            "separate": true,
            "position": 6,
            "prefix": "-o",
            "valueFrom": "4"
          }
        ],
        "label": "mirdeep2_mapper",
        "stdout": "",
        "class": "CommandLineTool",
        "sbg:project": "mia.steinberg/mirna-analysis",
        "id": "mia.steinberg/mirna-analysis/mirdeep2-mapper/1",
        "successCodes": [],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "label": "mapper output",
            "type": [
              "null",
              "File"
            ],
            "id": "#reads_vs_genome",
            "sbg:fileTypes": "ARF",
            "outputBinding": {
              "glob": "*reads_vs_genome.arf"
            }
          },
          {
            "label": "mapper log file",
            "type": [
              "null",
              "File"
            ],
            "id": "#mapper_logs",
            "outputBinding": {
              "glob": "mapper_logs/mapper*"
            }
          },
          {
            "label": "reads.fa output",
            "type": [
              "File"
            ],
            "id": "#mapped_reads",
            "sbg:fileTypes": "FA",
            "outputBinding": {
              "glob": "*reads.fa"
            }
          },
          {
            "label": "bowtie log",
            "type": [
              "null",
              "File"
            ],
            "id": "#bowtie_log",
            "sbg:fileTypes": "LOG",
            "outputBinding": {
              "glob": "bowtie.log"
            }
          }
        ],
        "sbg:revision": 1,
        "sbg:modifiedOn": 1469816741,
        "sbg:latestRevision": 1,
        "sbg:createdOn": 1469815876,
        "sbg:job": {
          "inputs": {
            "trimmed_fastq": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/trimmed_fastq.ext"
            },
            "bowtie_index": [
              {
                "class": "File",
                "secondaryFiles": [],
                "size": 0,
                "path": "/path/to/hg19_bowtie.1.ebwt"
              },
              {
                "class": "File",
                "secondaryFiles": [],
                "size": 0,
                "path": "/path/to/hg19_bowtie.fa"
              }
            ]
          },
          "allocatedResources": {
            "cpu": 4,
            "mem": 96000
          }
        },
        "inputs": [
          {
            "label": "trimmed fastq",
            "required": false,
            "inputBinding": {
              "separate": true,
              "position": 1,
              "sbg:cmdInclude": true
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#trimmed_fastq",
            "sbg:fileTypes": ".FASTQ"
          },
          {
            "label": "bowtie index files for reference genome",
            "required": false,
            "type": [
              "null",
              {
                "type": "array",
                "items": "File",
                "name": "bowtie_index"
              }
            ],
            "id": "#bowtie_index",
            "sbg:fileTypes": "EWBT, FA, FAI",
            "sbg:stageInput": "link"
          }
        ],
        "description": "",
        "sbg:sbgMaintained": false,
        "sbg:contributors": [
          "mia.steinberg"
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mia.steinberg",
            "sbg:revision": 0,
            "sbg:revisionNotes": "Copy of mia.steinberg/mirdeep2-0-0-8/mirdeep2-mapper/14",
            "sbg:modifiedOn": 1469815876
          },
          {
            "sbg:modifiedBy": "mia.steinberg",
            "sbg:revision": 1,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1469816741
          }
        ],
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "dockerPull": "rabix/js-engine",
                "class": "DockerRequirement"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "mapper.pl"
        ],
        "sbg:cmdPreview": "mapper.pl  -e -h -q -m -u -v -r 5 -o 4 -p hg19_bowtie -s S6.reads.fa -t S6.reads_vs_genome.arf",
        "y": 697.7051250751206
      },
      "outputs": [
        {
          "id": "#mirdeep2_mapper.reads_vs_genome"
        },
        {
          "id": "#mirdeep2_mapper.mapper_logs"
        },
        {
          "id": "#mirdeep2_mapper.mapped_reads"
        },
        {
          "id": "#mirdeep2_mapper.bowtie_log"
        }
      ],
      "id": "#mirdeep2_mapper",
      "inputs": [
        {
          "source": [
            "#cutadapt.trimmed_fastq"
          ],
          "id": "#mirdeep2_mapper.trimmed_fastq"
        },
        {
          "source": [
            "#bowtie_index"
          ],
          "id": "#mirdeep2_mapper.bowtie_index"
        }
      ],
      "sbg:x": 662.6153564453128
    },
    {
      "sbg:y": 138.71790959284863,
      "run": {
        "sbg:modifiedBy": "mia.steinberg",
        "sbg:image_url": "https://brood.sbgenomics.com/static/mia.steinberg/mirna-analysis/rna-seq-alignment-star/4.png",
        "sbg:canvas_y": -16,
        "sbg:id": "mia.steinberg/mirna-analysis/rna-seq-alignment-star/4",
        "x": 629.2306283804089,
        "requirements": [],
        "sbg:canvas_x": -41,
        "sbg:toolAuthor": "Seven Bridges Genomics",
        "steps": [
          {
            "sbg:y": 470.9165938595894,
            "run": {
              "sbg:modifiedBy": "bix-demo",
              "sbg:toolAuthor": "Broad Institute",
              "sbg:license": "MIT License, Apache 2.0 Licence",
              "sbg:id": "admin/sbg-public-data/picard-sortsam-1-140/2",
              "x": 773.083180715633,
              "requirements": [
                {
                  "class": "ExpressionEngineRequirement",
                  "engineCommand": "cwl-engine.js",
                  "id": "#cwl-js-engine",
                  "requirements": [
                    {
                      "dockerPull": "rabix/js-engine",
                      "class": "DockerRequirement"
                    }
                  ]
                }
              ],
              "hints": [
                {
                  "dockerImageId": "eab0e70b6629",
                  "dockerPull": "images.sbgenomics.com/mladenlsbg/picard:1.140",
                  "class": "DockerRequirement"
                },
                {
                  "value": 1,
                  "class": "sbg:CPURequirement"
                },
                {
                  "value": {
                    "class": "Expression",
                    "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn $job.inputs.memory_per_job\n  }\n  \treturn 2048\n}",
                    "engine": "#cwl-js-engine"
                  },
                  "class": "sbg:MemRequirement"
                }
              ],
              "stdin": "",
              "sbg:createdBy": "bix-demo",
              "arguments": [
                {
                  "separate": false,
                  "position": 0,
                  "prefix": "OUTPUT=",
                  "valueFrom": {
                    "class": "Expression",
                    "script": "{\n  filename = $job.inputs.input_bam.path\n  ext = $job.inputs.output_type\n\nif (ext === \"BAM\")\n{\n    return filename.split('.').slice(0, -1).concat(\"sorted.bam\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n    }\n\nelse if (ext === \"SAM\")\n{\n    return filename.split('.').slice(0, -1).concat(\"sorted.sam\").join('.').replace(/^.*[\\\\\\/]/, '')\n}\n\nelse \n{\n\treturn filename.split('.').slice(0, -1).concat(\"sorted.\"+filename.split('.').slice(-1)[0]).join(\".\").replace(/^.*[\\\\\\/]/, '')\n}\n}",
                    "engine": "#cwl-js-engine"
                  }
                },
                {
                  "separate": true,
                  "position": 1000,
                  "valueFrom": {
                    "class": "Expression",
                    "script": "{\n  filename = $job.inputs.input_bam.path\n  \n  /* figuring out output file type */\n  ext = $job.inputs.output_type\n  if (ext === \"BAM\")\n  {\n    out_extension = \"BAM\"\n  }\n  else if (ext === \"SAM\")\n  {\n    out_extension = \"SAM\"\n  }\n  else \n  {\n\tout_extension = filename.split('.').slice(-1)[0].toUpperCase()\n  }  \n  \n  /* if exist moving .bai in bam.bai */\n  if ($job.inputs.create_index === 'True' && $job.inputs.sort_order === 'Coordinate' && out_extension == \"BAM\")\n  {\n    \n    old_name = filename.split('.').slice(0, -1).concat('sorted.bai').join('.').replace(/^.*[\\\\\\/]/, '')\n    new_name = filename.split('.').slice(0, -1).concat('sorted.bam.bai').join('.').replace(/^.*[\\\\\\/]/, '')\n    return \"; mv \" + \" \" + old_name + \" \" + new_name\n  }\n\n}",
                    "engine": "#cwl-js-engine"
                  }
                }
              ],
              "label": "Picard SortSam",
              "stdout": "",
              "class": "CommandLineTool",
              "inputs": [
                {
                  "label": "Validation stringency",
                  "inputBinding": {
                    "separate": false,
                    "prefix": "VALIDATION_STRINGENCY=",
                    "sbg:cmdInclude": true,
                    "valueFrom": {
                      "class": "Expression",
                      "script": "{\n  if ($job.inputs.validation_stringency)\n  {\n    return $job.inputs.validation_stringency\n  }\n  else\n  {\n    return \"SILENT\"\n  }\n}",
                      "engine": "#cwl-js-engine"
                    }
                  },
                  "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}.",
                  "sbg:category": "Other input types",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "validation_stringency",
                      "symbols": [
                        "STRICT",
                        "LENIENT",
                        "SILENT"
                      ]
                    }
                  ],
                  "id": "#validation_stringency",
                  "sbg:toolDefaultValue": "SILENT"
                },
                {
                  "label": "Sort order",
                  "id": "#sort_order",
                  "inputBinding": {
                    "prefix": "SORT_ORDER=",
                    "sbg:cmdInclude": true,
                    "position": 3,
                    "separate": false,
                    "valueFrom": {
                      "class": "Expression",
                      "script": "{\n  p = $job.inputs.sort_order.toLowerCase()\n  return p\n}",
                      "engine": "#cwl-js-engine"
                    }
                  },
                  "sbg:category": "Other input types",
                  "type": [
                    {
                      "type": "enum",
                      "name": "sort_order",
                      "symbols": [
                        "Unsorted",
                        "Queryname",
                        "Coordinate"
                      ]
                    }
                  ],
                  "description": "Sort order of the output file. Possible values: {unsorted, queryname, coordinate}.",
                  "sbg:altPrefix": "SO",
                  "sbg:toolDefaultValue": "Coordinate"
                },
                {
                  "label": "Quiet",
                  "inputBinding": {
                    "separate": false,
                    "prefix": "QUIET=",
                    "sbg:cmdInclude": true
                  },
                  "description": "This parameter indicates whether to suppress job-summary info on System.err. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                  "sbg:category": "Other input types",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "quiet",
                      "symbols": [
                        "True",
                        "False"
                      ]
                    }
                  ],
                  "id": "#quiet",
                  "sbg:toolDefaultValue": "False"
                },
                {
                  "label": "Output format",
                  "description": "Since Picard tools can output both SAM and BAM files, user can choose the format of the output file.",
                  "sbg:category": "Other input types",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "output_type",
                      "symbols": [
                        "BAM",
                        "SAM",
                        "SAME AS INPUT"
                      ]
                    }
                  ],
                  "id": "#output_type",
                  "sbg:toolDefaultValue": "SAME AS INPUT"
                },
                {
                  "label": "Memory per job",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#memory_per_job",
                  "description": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs.",
                  "sbg:toolDefaultValue": "2048"
                },
                {
                  "label": "Max records in RAM",
                  "inputBinding": {
                    "separate": false,
                    "prefix": "MAX_RECORDS_IN_RAM=",
                    "sbg:cmdInclude": true
                  },
                  "description": "When writing SAM files that need to be sorted, this parameter will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. This option can be set to 'null' to clear the default value.",
                  "sbg:category": "Other input types",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#max_records_in_ram",
                  "sbg:toolDefaultValue": "500000"
                },
                {
                  "label": "Input BAM",
                  "sbg:fileTypes": "BAM, SAM",
                  "required": true,
                  "inputBinding": {
                    "separate": false,
                    "position": 1,
                    "prefix": "INPUT=",
                    "sbg:cmdInclude": true
                  },
                  "sbg:category": "File inputs",
                  "type": [
                    "File"
                  ],
                  "id": "#input_bam",
                  "sbg:altPrefix": "I",
                  "description": "The BAM or SAM file to sort."
                },
                {
                  "label": "Create index",
                  "inputBinding": {
                    "separate": false,
                    "position": 5,
                    "prefix": "CREATE_INDEX=",
                    "sbg:cmdInclude": true
                  },
                  "description": "This parameter indicates whether to create a BAM index when writing a coordinate-sorted BAM file. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                  "sbg:category": "Other input types",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "create_index",
                      "symbols": [
                        "True",
                        "False"
                      ]
                    }
                  ],
                  "id": "#create_index",
                  "sbg:toolDefaultValue": "False"
                },
                {
                  "label": "Compression level",
                  "inputBinding": {
                    "separate": false,
                    "prefix": "COMPRESSION_LEVEL=",
                    "sbg:cmdInclude": true
                  },
                  "description": "Compression level for all compressed files created (e.g. BAM and GELI). This option can be set to 'null' to clear the default value.",
                  "sbg:category": "Other input types",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#compression_level",
                  "sbg:toolDefaultValue": "5"
                }
              ],
              "sbg:project": "bix-demo/picard-1-140-demo",
              "sbg:categories": [
                "SAM/BAM-Processing"
              ],
              "id": "admin/sbg-public-data/picard-sortsam-1-140/2",
              "successCodes": [],
              "sbg:validationErrors": [],
              "outputs": [
                {
                  "label": "Sorted BAM/SAM",
                  "outputBinding": {
                    "sbg:metadata": {
                      "__inherit__": "input_bam"
                    },
                    "secondaryFiles": [
                      "^.bai",
                      ".bai"
                    ],
                    "sbg:inheritMetadataFrom": "#input_bam",
                    "glob": "*.sorted.?am"
                  },
                  "type": [
                    "null",
                    "File"
                  ],
                  "id": "#sorted_bam",
                  "sbg:fileTypes": "BAM, SAM",
                  "description": "Sorted BAM or SAM file."
                }
              ],
              "sbg:revision": 2,
              "sbg:toolkitVersion": "1.140",
              "sbg:modifiedOn": 1450911170,
              "sbg:latestRevision": 2,
              "sbg:createdOn": 1450911168,
              "sbg:job": {
                "inputs": {
                  "input_bam": {
                    "path": "/root/dir/example.tested.bam"
                  },
                  "sort_order": "Coordinate",
                  "output_type": null,
                  "create_index": null,
                  "memory_per_job": 2048
                },
                "allocatedResources": {
                  "cpu": 1,
                  "mem": 2048
                }
              },
              "temporaryFailCodes": [],
              "description": "Picard SortSam sorts the input SAM or BAM. Input and output formats are determined by the file extension.",
              "sbg:sbgMaintained": false,
              "sbg:contributors": [
                "bix-demo"
              ],
              "sbg:revisionsInfo": [
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 0,
                  "sbg:modifiedOn": 1450911168
                },
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 1,
                  "sbg:modifiedOn": 1450911169
                },
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 2,
                  "sbg:modifiedOn": 1450911170
                }
              ],
              "sbg:links": [
                {
                  "label": "Homepage",
                  "id": "http://broadinstitute.github.io/picard/index.html"
                },
                {
                  "label": "Source Code",
                  "id": "https://github.com/broadinstitute/picard/releases/tag/1.138"
                },
                {
                  "label": "Wiki",
                  "id": "http://broadinstitute.github.io/picard/"
                },
                {
                  "label": "Download",
                  "id": "https://github.com/broadinstitute/picard/zipball/master"
                },
                {
                  "label": "Publication",
                  "id": "http://broadinstitute.github.io/picard/"
                }
              ],
              "baseCommand": [
                "java",
                {
                  "class": "Expression",
                  "script": "{   \n  if($job.inputs.memory_per_job){\n    return '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }   \n  \treturn '-Xmx2048M'\n}",
                  "engine": "#cwl-js-engine"
                },
                "-jar",
                "/opt/picard-tools-1.140/picard.jar",
                "SortSam"
              ],
              "sbg:cmdPreview": "java -Xmx2048M -jar /opt/picard-tools-1.140/picard.jar SortSam OUTPUT=example.tested.sorted.bam INPUT=/root/dir/example.tested.bam SORT_ORDER=coordinate   INPUT=/root/dir/example.tested.bam SORT_ORDER=coordinate  /root/dir/example.tested.bam",
              "y": 470.9165938595894,
              "sbg:toolkit": "Picard"
            },
            "outputs": [
              {
                "id": "#Picard_SortSam.sorted_bam"
              }
            ],
            "id": "#Picard_SortSam",
            "inputs": [
              {
                "id": "#Picard_SortSam.validation_stringency",
                "default": "SILENT"
              },
              {
                "id": "#Picard_SortSam.sort_order",
                "default": "Coordinate"
              },
              {
                "id": "#Picard_SortSam.quiet"
              },
              {
                "id": "#Picard_SortSam.output_type"
              },
              {
                "id": "#Picard_SortSam.memory_per_job"
              },
              {
                "id": "#Picard_SortSam.max_records_in_ram"
              },
              {
                "source": [
                  "#STAR.aligned_reads"
                ],
                "id": "#Picard_SortSam.input_bam"
              },
              {
                "id": "#Picard_SortSam.create_index",
                "default": "True"
              },
              {
                "id": "#Picard_SortSam.compression_level"
              }
            ],
            "sbg:x": 773.083180715633
          },
          {
            "sbg:y": 323,
            "run": {
              "sbg:modifiedBy": "ana_d",
              "stdin": "",
              "sbg:license": "GNU General Public License v3.0 only",
              "appUrl": "/public/apps/#tool/admin/sbg-public-data/star/4",
              "sbg:id": "admin/sbg-public-data/star/4",
              "x": 623.9999999999999,
              "requirements": [
                {
                  "class": "ExpressionEngineRequirement",
                  "requirements": [
                    {
                      "dockerPull": "rabix/js-engine",
                      "class": "DockerRequirement"
                    }
                  ],
                  "id": "#cwl-js-engine"
                }
              ],
              "hints": [
                {
                  "dockerImageId": "a4b0ad2c3cae",
                  "dockerPull": "images.sbgenomics.com/ana_d/star:2.4.2a",
                  "class": "DockerRequirement"
                },
                {
                  "value": 60000,
                  "class": "sbg:MemRequirement"
                },
                {
                  "value": 15,
                  "class": "sbg:CPURequirement"
                }
              ],
              "sbg:image_url": null,
              "sbg:createdBy": "bix-demo",
              "arguments": [
                {
                  "separate": true,
                  "valueFrom": {
                    "class": "Expression",
                    "script": "{\n  file = [].concat($job.inputs.reads)[0].path\n  extension = /(?:\\.([^.]+))?$/.exec(file)[1]\n  if (extension == \"gz\") {\n    return \"--readFilesCommand zcat\"\n  } else if (extension == \"bz2\") {\n    return \"--readFilesCommand bzcat\"\n  }\n}",
                    "engine": "#cwl-js-engine"
                  }
                },
                {
                  "separate": true,
                  "valueFrom": {
                    "class": "Expression",
                    "script": "{\t\n  var sjFormat = \"False\"\n  var gtfgffFormat = \"False\"\n  var list = $job.inputs.sjdbGTFfile\n  var paths_list = []\n  var joined_paths = \"\"\n  \n  if (list) {\n    list.forEach(function(f){return paths_list.push(f.path)})\n    joined_paths = paths_list.join(\" \")\n\n\n    paths_list.forEach(function(f){\n      ext = f.replace(/^.*\\./, '')\n      if (ext == \"gff\" || ext == \"gtf\") {\n        gtfgffFormat = \"True\"\n        return gtfgffFormat\n      }\n      if (ext == \"txt\") {\n        sjFormat = \"True\"\n        return sjFormat\n      }\n    })\n\n    if ($job.inputs.sjdbGTFfile && $job.inputs.sjdbInsertSave != \"None\") {\n      if (sjFormat == \"True\") {\n        return \"--sjdbFileChrStartEnd \".concat(joined_paths)\n      }\n      else if (gtfgffFormat == \"True\") {\n        return \"--sjdbGTFfile \".concat(joined_paths)\n      }\n    }\n  }\n}",
                    "engine": "#cwl-js-engine"
                  }
                },
                {
                  "separate": true,
                  "valueFrom": {
                    "class": "Expression",
                    "script": "{\n  a = b = c = d = e = f = g = []\n  if ($job.inputs.sjdbGTFchrPrefix) {\n    a = [\"--sjdbGTFchrPrefix\", $job.inputs.sjdbGTFchrPrefix]\n  }\n  if ($job.inputs.sjdbGTFfeatureExon) {\n    b = [\"--sjdbGTFfeatureExon\", $job.inputs.sjdbGTFfeatureExon]\n  }\n  if ($job.inputs.sjdbGTFtagExonParentTranscript) {\n    c = [\"--sjdbGTFtagExonParentTranscript\", $job.inputs.sjdbGTFtagExonParentTranscript]\n  }\n  if ($job.inputs.sjdbGTFtagExonParentGene) {\n    d = [\"--sjdbGTFtagExonParentGene\", $job.inputs.sjdbGTFtagExonParentGene]\n  }\n  if ($job.inputs.sjdbOverhang) {\n    e = [\"--sjdbOverhang\", $job.inputs.sjdbOverhang]\n  }\n  if ($job.inputs.sjdbScore) {\n    f = [\"--sjdbScore\", $job.inputs.sjdbScore]\n  }\n  if ($job.inputs.sjdbInsertSave) {\n    g = [\"--sjdbInsertSave\", $job.inputs.sjdbInsertSave]\n  }\n  \n  \n  \n  if ($job.inputs.sjdbInsertSave != \"None\" && $job.inputs.sjdbGTFfile) {\n    new_list = a.concat(b, c, d, e, f, g)\n    return new_list.join(\" \")\n  }\n}",
                    "engine": "#cwl-js-engine"
                  }
                },
                {
                  "separate": true,
                  "valueFrom": {
                    "class": "Expression",
                    "script": "{\n  if ($job.inputs.twopassMode == \"Basic\") {\n    return \"--twopass1readsN \".concat($job.inputs.twopass1readsN)\n  }\n}",
                    "engine": "#cwl-js-engine"
                  }
                },
                {
                  "separate": true,
                  "valueFrom": {
                    "class": "Expression",
                    "script": "{\n  if ($job.inputs.chimOutType == \"Within\") {\n    return \"--chimOutType \".concat(\"Within\", $job.inputs.outSAMtype)\n  }\n  else {\n    return \"--chimOutType SeparateSAMold\"\n  }\n}",
                    "engine": "#cwl-js-engine"
                  }
                },
                {
                  "separate": true,
                  "valueFrom": {
                    "class": "Expression",
                    "script": "{\n  var param_list = []\n  \n  function add_param(key, value){\n    if (value == \"\") {\n      return\n    }\n    else {\n      return param_list.push(key.concat(\":\", value))\n    }\n  }\n  \n  add_param('ID', \"1\")\n  if ($job.inputs.rg_seq_center) {\n    add_param('CN', $job.inputs.rg_seq_center)\n  } else if ([].concat($job.inputs.reads)[0].metadata.seq_center) {\n    add_param('CN', [].concat($job.inputs.reads)[0].metadata.seq_center)\n  }\n  if ($job.inputs.rg_library_id) {\n    add_param('LB', $job.inputs.rg_library_id)\n  } else if ([].concat($job.inputs.reads)[0].metadata.library_id) {\n    add_param('LB', [].concat($job.inputs.reads)[0].metadata.library_id)\n  }\n  if ($job.inputs.rg_mfl) {\n    add_param('PI', $job.inputs.rg_mfl)\n  } else if ([].concat($job.inputs.reads)[0].metadata.median_fragment_length) {\n    add_param('PI', [].concat($job.inputs.reads)[0].metadata.median_fragment_length)\n  }\n  if ($job.inputs.rg_platform) {\n    add_param('PL', $job.inputs.rg_platform.replace(/ /g,\"_\"))\n  } else if ([].concat($job.inputs.reads)[0].metadata.platform) {\n    add_param('PL', [].concat($job.inputs.reads)[0].metadata.platform.replace(/ /g,\"_\"))\n  }\n  if ($job.inputs.rg_platform_unit_id) {\n    add_param('PU', $job.inputs.rg_platform_unit_id)\n  } else if ([].concat($job.inputs.reads)[0].metadata.platform_unit_id) {\n    add_param('PU', [].concat($job.inputs.reads)[0].metadata.platform_unit_id)\n  }\n  if ($job.inputs.rg_sample_id) {\n    add_param('SM', $job.inputs.rg_sample_id)\n  } else if ([].concat($job.inputs.reads)[0].metadata.sample_id) {\n    add_param('SM', [].concat($job.inputs.reads)[0].metadata.sample_id)\n  }\n  return \"--outSAMattrRGline \".concat(param_list.join(\" \"))\n}",
                    "engine": "#cwl-js-engine"
                  }
                },
                {
                  "separate": true,
                  "valueFrom": {
                    "class": "Expression",
                    "script": "{\n  if ($job.inputs.sjdbGTFfile && $job.inputs.quantMode) {\n    return \"--quantMode \".concat($job.inputs.quantMode)\n  }\n}",
                    "engine": "#cwl-js-engine"
                  }
                },
                {
                  "separate": true,
                  "position": 100,
                  "valueFrom": {
                    "class": "Expression",
                    "script": "{\n  function sharedStart(array){\n  var A= array.concat().sort(), \n      a1= A[0], a2= A[A.length-1], L= a1.length, i= 0;\n  while(i<L && a1.charAt(i)=== a2.charAt(i)) i++;\n  return a1.substring(0, i);\n  }\n  path_list = []\n  arr = [].concat($job.inputs.reads)\n  arr.forEach(function(f){return path_list.push(f.path.replace(/\\\\/g,'/').replace( /.*\\//, '' ))})\n  common_prefix = sharedStart(path_list)\n  intermediate = common_prefix.replace( /\\-$|\\_$|\\.$/, '' ).concat(\"._STARgenome\")\n  source = \"./\".concat(intermediate)\n  destination = intermediate.concat(\".tar\")\n  if ($job.inputs.sjdbGTFfile && $job.inputs.sjdbInsertSave && $job.inputs.sjdbInsertSave != \"None\") {\n    return \"&& tar -vcf \".concat(destination, \" \", source)\n  }\n}",
                    "engine": "#cwl-js-engine"
                  }
                },
                {
                  "separate": true,
                  "prefix": "--outFileNamePrefix",
                  "valueFrom": {
                    "class": "Expression",
                    "script": "{\n  function sharedStart(array){\n  var A= array.concat().sort(), \n      a1= A[0], a2= A[A.length-1], L= a1.length, i= 0;\n  while(i<L && a1.charAt(i)=== a2.charAt(i)) i++;\n  return a1.substring(0, i);\n  }\n  path_list = []\n  arr = [].concat($job.inputs.reads)\n  arr.forEach(function(f){return path_list.push(f.path.replace(/\\\\/g,'/').replace( /.*\\//, '' ))})\n  common_prefix = sharedStart(path_list)\n  return \"./\".concat(common_prefix.replace( /\\-$|\\_$|\\.$/, '' ), \".\")\n}",
                    "engine": "#cwl-js-engine"
                  }
                },
                {
                  "separate": true,
                  "position": 101,
                  "valueFrom": {
                    "class": "Expression",
                    "script": "{\n  function sharedStart(array){\n  var A= array.concat().sort(), \n      a1= A[0], a2= A[A.length-1], L= a1.length, i= 0;\n  while(i<L && a1.charAt(i)=== a2.charAt(i)) i++;\n  return a1.substring(0, i);\n  }\n  path_list = []\n  arr = [].concat($job.inputs.reads)\n  arr.forEach(function(f){return path_list.push(f.path.replace(/\\\\/g,'/').replace( /.*\\//, '' ))})\n  common_prefix = sharedStart(path_list)\n  mate1 = common_prefix.replace( /\\-$|\\_$|\\.$/, '' ).concat(\".Unmapped.out.mate1\")\n  mate2 = common_prefix.replace( /\\-$|\\_$|\\.$/, '' ).concat(\".Unmapped.out.mate2\")\n  mate1fq = mate1.concat(\".fastq\")\n  mate2fq = mate2.concat(\".fastq\")\n  if ($job.inputs.outReadsUnmapped == \"Fastx\" && arr.length > 1) {\n    return \"&& mv \".concat(mate1, \" \", mate1fq, \" && mv \", mate2, \" \", mate2fq)\n  }\n  else if ($job.inputs.outReadsUnmapped == \"Fastx\" && arr.length == 1) {\n    return \"&& mv \".concat(mate1, \" \", mate1fq)\n  }\n}",
                    "engine": "#cwl-js-engine"
                  }
                }
              ],
              "label": "STAR",
              "stdout": "",
              "sbg:sbgMaintained": false,
              "sbg:toolAuthor": "Alexander Dobin/CSHL",
              "sbg:project": "bix-demo/star-2-4-2a-demo",
              "sbg:categories": [
                "Alignment"
              ],
              "id": "admin/sbg-public-data/star/4",
              "successCodes": [],
              "sbg:validationErrors": [],
              "outputs": [
                {
                  "label": "Unmapped reads",
                  "outputBinding": {
                    "sbg:metadata": {},
                    "sbg:inheritMetadataFrom": "#reads",
                    "glob": "*Unmapped.out*"
                  },
                  "type": [
                    "null",
                    {
                      "type": "array",
                      "items": "File"
                    }
                  ],
                  "id": "#unmapped_reads",
                  "sbg:fileTypes": "FASTQ",
                  "description": "Output of unmapped reads."
                },
                {
                  "label": "Transcriptome alignments",
                  "outputBinding": {
                    "sbg:metadata": {},
                    "sbg:inheritMetadataFrom": "#reads",
                    "glob": "*Transcriptome*"
                  },
                  "type": [
                    "null",
                    "File"
                  ],
                  "id": "#transcriptome_aligned_reads",
                  "sbg:fileTypes": "BAM",
                  "description": "Alignments translated into transcript coordinates."
                },
                {
                  "label": "Splice junctions",
                  "outputBinding": {
                    "sbg:metadata": {},
                    "sbg:inheritMetadataFrom": "#reads",
                    "glob": "*SJ.out.tab"
                  },
                  "type": [
                    "null",
                    "File"
                  ],
                  "id": "#splice_junctions",
                  "sbg:fileTypes": "TAB",
                  "description": "High confidence collapsed splice junctions in tab-delimited format. Only junctions supported by uniquely mapping reads are reported."
                },
                {
                  "label": "Reads per gene",
                  "outputBinding": {
                    "sbg:metadata": {},
                    "sbg:inheritMetadataFrom": "#reads",
                    "glob": "*ReadsPerGene*"
                  },
                  "type": [
                    "null",
                    "File"
                  ],
                  "id": "#reads_per_gene",
                  "sbg:fileTypes": "TAB",
                  "description": "File with number of reads per gene. A read is counted if it overlaps (1nt or more) one and only one gene."
                },
                {
                  "label": "Log files",
                  "outputBinding": {
                    "sbg:metadata": {},
                    "sbg:inheritMetadataFrom": "#reads",
                    "glob": "*Log*.out"
                  },
                  "type": [
                    "null",
                    {
                      "type": "array",
                      "items": "File"
                    }
                  ],
                  "id": "#log_files",
                  "sbg:fileTypes": "OUT",
                  "description": "Log files produced during alignment."
                },
                {
                  "label": "Intermediate genome files",
                  "outputBinding": {
                    "sbg:metadata": {},
                    "sbg:inheritMetadataFrom": "#reads",
                    "glob": "*_STARgenome.tar"
                  },
                  "type": [
                    "null",
                    "File"
                  ],
                  "id": "#intermediate_genome",
                  "sbg:fileTypes": "TAR",
                  "description": "Archive with genome files produced when annotations are included on the fly (in the mapping step)."
                },
                {
                  "label": "Chimeric junctions",
                  "outputBinding": {
                    "sbg:metadata": {},
                    "sbg:inheritMetadataFrom": "#reads",
                    "glob": "*Chimeric.out.junction"
                  },
                  "type": [
                    "null",
                    "File"
                  ],
                  "id": "#chimeric_junctions",
                  "sbg:fileTypes": "JUNCTION",
                  "description": "If chimSegmentMin in 'Chimeric Alignments' section is set to 0, 'Chimeric Junctions' won't be output."
                },
                {
                  "label": "Chimeric alignments",
                  "outputBinding": {
                    "sbg:metadata": {},
                    "sbg:inheritMetadataFrom": "#reads",
                    "glob": "*.Chimeric.out.sam"
                  },
                  "type": [
                    "null",
                    "File"
                  ],
                  "id": "#chimeric_alignments",
                  "sbg:fileTypes": "SAM",
                  "description": "Aligned Chimeric sequences SAM - if chimSegmentMin = 0, no Chimeric Alignment SAM and Chimeric Junctions outputs."
                },
                {
                  "label": "Aligned SAM/BAM",
                  "outputBinding": {
                    "sbg:metadata": {},
                    "sbg:inheritMetadataFrom": "#reads",
                    "glob": {
                      "class": "Expression",
                      "script": "{\n  if ($job.inputs.outSortingType == 'SortedByCoordinate') {\n    sort_name = '.sortedByCoord'\n  }\n  else {\n    sort_name = ''\n  }\n  if ($job.inputs.outSAMtype == 'BAM') {\n    sam_name = \"*.Aligned\".concat( sort_name, '.out.bam')\n  }\n  else {\n    sam_name = \"*.Aligned.out.sam\"\n  }\n  return sam_name\n}",
                      "engine": "#cwl-js-engine"
                    }
                  },
                  "type": [
                    "null",
                    "File"
                  ],
                  "id": "#aligned_reads",
                  "sbg:fileTypes": "SAM, BAM",
                  "description": "Aligned sequence in SAM/BAM format."
                }
              ],
              "sbg:revision": 4,
              "sbg:toolkitVersion": "2.4.2a",
              "sbg:modifiedOn": 1462889222,
              "sbg:latestRevision": 4,
              "sbg:createdOn": 1450911471,
              "sbg:job": {
                "inputs": {
                  "quantMode": "TranscriptomeSAM",
                  "rg_mfl": "rg_mfl",
                  "alignSplicedMateMapLminOverLmate": 0,
                  "outSAMheaderPG": "outSAMheaderPG",
                  "outFilterMultimapScoreRange": 0,
                  "seedPerWindowNmax": 0,
                  "sjdbGTFtagExonParentTranscript": "",
                  "chimSegmentMin": 0,
                  "sjdbGTFtagExonParentGene": "",
                  "limitOutSJoneRead": 0,
                  "chimScoreDropMax": 0,
                  "alignTranscriptsPerWindowNmax": 0,
                  "seedMultimapNmax": 0,
                  "scoreInsBase": 0,
                  "chimJunctionOverhangMin": 0,
                  "readMapNumber": 0,
                  "twopass1readsN": 0,
                  "outSAMheaderHD": "outSAMheaderHD",
                  "outSAMattributes": "Standard",
                  "alignSplicedMateMapLmin": 0,
                  "sjdbGTFfile": [
                    {
                      "path": "/demo/test-data/chr20.gtf"
                    }
                  ],
                  "outReadsUnmapped": "Fastx",
                  "clip3pAdapterMMp": [
                    0
                  ],
                  "rg_library_id": "",
                  "outQSconversionAdd": 0,
                  "limitOutSJcollapsed": 0,
                  "scoreDelBase": 0,
                  "scoreGapGCAG": 0,
                  "reads": [
                    {
                      "class": "File",
                      "secondaryFiles": [],
                      "size": 0,
                      "metadata": {
                        "seq_center": "illumina",
                        "format": "fastq",
                        "paired_end": "1"
                      },
                      "path": "/test-data/mate_1.fastq.bz2"
                    }
                  ],
                  "scoreGenomicLengthLog2scale": 0,
                  "limitBAMsortRAM": 0,
                  "alignWindowsPerReadNmax": 0,
                  "outSAMflagAND": 0,
                  "GENOME_DIR_NAME": "",
                  "seedNoneLociPerWindow": 0,
                  "scoreGapNoncan": 0,
                  "seedSearchLmax": 0,
                  "outSJfilterCountUniqueMin": [
                    3,
                    1,
                    1,
                    1
                  ],
                  "alignSJDBoverhangMin": 0,
                  "outFilterMismatchNoverReadLmax": 0,
                  "chimScoreSeparation": 0,
                  "readMatesLengthsIn": "NotEqual",
                  "outFilterMismatchNoverLmax": 0,
                  "sjdbGTFchrPrefix": "chrPrefix",
                  "limitSjdbInsertNsj": 0,
                  "alignIntronMax": 0,
                  "outFilterType": "Normal",
                  "seedSearchStartLmaxOverLread": 0,
                  "sjdbScore": null,
                  "seedSearchStartLmax": 0,
                  "clip3pAfterAdapterNbases": [
                    0
                  ],
                  "scoreStitchSJshift": 0,
                  "genome": {
                    "class": "File",
                    "secondaryFiles": [],
                    "size": 0,
                    "path": "genome.ext"
                  },
                  "outFilterIntronMotifs": "None",
                  "rg_platform": "Ion Torrent PGM",
                  "seedPerReadNmax": 0,
                  "outSAMunmapped": "None",
                  "sjdbOverhang": null,
                  "outSAMmapqUnique": 0,
                  "outSJfilterCountTotalMin": [
                    3,
                    1,
                    1,
                    1
                  ],
                  "winAnchorDistNbins": 0,
                  "outSAMstrandField": "None",
                  "alignIntronMin": 0,
                  "outSJfilterOverhangMin": [
                    30,
                    12,
                    12,
                    12
                  ],
                  "alignTranscriptsPerReadNmax": 0,
                  "outSJfilterDistToOtherSJmin": [
                    0
                  ],
                  "rg_platform_unit_id": "rg_platform_unit",
                  "outFilterMatchNminOverLread": 0,
                  "outSortingType": "SortedByCoordinate",
                  "quantTranscriptomeBan": "IndelSoftclipSingleend",
                  "outFilterScoreMinOverLread": 0,
                  "outSJfilterReads": "All",
                  "clip5pNbases": [
                    0
                  ],
                  "clip3pAdapterSeq": [
                    "clip3pAdapterSeq"
                  ],
                  "alignMatesGapMax": 0,
                  "chimOutType": "Within",
                  "chimScoreMin": 0,
                  "chimScoreJunctionNonGTAG": 0,
                  "outFilterMultimapNmax": 0,
                  "sjdbGTFfeatureExon": "",
                  "outSJfilterIntronMaxVsReadN": [
                    0
                  ],
                  "outSAMmode": "Full",
                  "outSAMreadID": "Standard",
                  "rg_sample_id": "rg_sample",
                  "alignSJoverhangMin": 0,
                  "scoreGapATAC": 0,
                  "winFlankNbins": 0,
                  "sjdbInsertSave": "Basic",
                  "outFilterMismatchNmax": 0,
                  "clip3pNbases": [
                    0,
                    3
                  ],
                  "outFilterScoreMin": 0,
                  "outSAMflagOR": 0,
                  "winAnchorMultimapNmax": 0,
                  "outSAMprimaryFlag": "OneBestScore",
                  "scoreDelOpen": 0,
                  "winBinNbits": 0,
                  "alignSoftClipAtReferenceEnds": "Yes",
                  "scoreGap": 0,
                  "alignEndsType": "Local",
                  "outFilterMatchNmin": 0,
                  "outSAMtype": "BAM",
                  "scoreInsOpen": 0,
                  "outSAMorder": "Paired",
                  "rg_seq_center": "",
                  "twopassMode": "Basic"
                },
                "allocatedResources": {
                  "cpu": 15,
                  "mem": 60000
                }
              },
              "inputs": [
                {
                  "label": "Flanking regions size",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--winFlankNbins",
                    "sbg:cmdInclude": true
                  },
                  "description": "=log2(winFlank), where win Flank is the size of the left and right flanking regions for each window (int>0).",
                  "sbg:category": "Windows, Anchors, Binning",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#winFlankNbins",
                  "sbg:toolDefaultValue": "4"
                },
                {
                  "label": "Bin size",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--winBinNbits",
                    "sbg:cmdInclude": true
                  },
                  "description": "=log2(winBin), where winBin is the size of the bin for the windows/clustering, each window will occupy an integer number of bins (int>0).",
                  "sbg:category": "Windows, Anchors, Binning",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#winBinNbits",
                  "sbg:toolDefaultValue": "16"
                },
                {
                  "label": "Max loci anchors",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--winAnchorMultimapNmax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Max number of loci anchors are allowed to map to (int>0).",
                  "sbg:category": "Windows, Anchors, Binning",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#winAnchorMultimapNmax",
                  "sbg:toolDefaultValue": "50"
                },
                {
                  "label": "Max bins between anchors",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--winAnchorDistNbins",
                    "sbg:cmdInclude": true
                  },
                  "description": "Max number of bins between two anchors that allows aggregation of anchors into one window (int>0).",
                  "sbg:category": "Windows, Anchors, Binning",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#winAnchorDistNbins",
                  "sbg:toolDefaultValue": "9"
                },
                {
                  "label": "Two-pass mode",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--twopassMode",
                    "sbg:cmdInclude": true
                  },
                  "description": "2-pass mapping mode. None: 1-pass mapping; Basic: basic 2-pass mapping, with all 1st pass junctions inserted into the genome indices on the fly.",
                  "sbg:category": "2-pass mapping",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "twopassMode",
                      "symbols": [
                        "None",
                        "Basic"
                      ]
                    }
                  ],
                  "id": "#twopassMode",
                  "sbg:toolDefaultValue": "None"
                },
                {
                  "label": "Reads to process in 1st step",
                  "required": false,
                  "description": "Number of reads to process for the 1st step. 0: 1-step only, no 2nd pass; use very large number to map all reads in the first step (int>0).",
                  "sbg:category": "2-pass mapping",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#twopass1readsN",
                  "sbg:toolDefaultValue": "-1"
                },
                {
                  "label": "Extra alignment score",
                  "required": false,
                  "description": "Extra alignment score for alignments that cross database junctions.",
                  "sbg:category": "Splice junctions database",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#sjdbScore",
                  "sbg:toolDefaultValue": "2"
                },
                {
                  "label": "\"Overhang\" length",
                  "required": false,
                  "description": "Length of the donor/acceptor sequence on each side of the junctions, ideally = (mate_length - 1) (int >= 0), if int = 0, splice junction database is not used.",
                  "sbg:category": "Splice junctions database",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#sjdbOverhang",
                  "sbg:toolDefaultValue": "100"
                },
                {
                  "label": "Save junction files",
                  "required": false,
                  "description": "Which files to save when sjdb junctions are inserted on the fly at the mapping step. None: not saving files at all; Basic: only small junction/transcript files; All: all files including big Genome, SA and SAindex. These files are output as archive.",
                  "sbg:category": "Splice junctions database",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "sjdbInsertSave",
                      "symbols": [
                        "Basic",
                        "All",
                        "None"
                      ]
                    }
                  ],
                  "id": "#sjdbInsertSave",
                  "sbg:toolDefaultValue": "None"
                },
                {
                  "label": "Exons' parents name",
                  "required": false,
                  "description": "Tag name to be used as exons\u2019 transcript-parents.",
                  "sbg:category": "Splice junctions database",
                  "type": [
                    "null",
                    "string"
                  ],
                  "id": "#sjdbGTFtagExonParentTranscript",
                  "sbg:toolDefaultValue": "transcript_id"
                },
                {
                  "label": "Gene name",
                  "required": false,
                  "description": "Tag name to be used as exons\u2019 gene-parents.",
                  "sbg:category": "Splice junctions database",
                  "type": [
                    "null",
                    "string"
                  ],
                  "id": "#sjdbGTFtagExonParentGene",
                  "sbg:toolDefaultValue": "gene_id"
                },
                {
                  "label": "Splice junction file",
                  "required": false,
                  "sbg:category": "Basic",
                  "type": [
                    "null",
                    {
                      "type": "array",
                      "items": "File"
                    }
                  ],
                  "id": "#sjdbGTFfile",
                  "sbg:fileTypes": "GTF, GFF, TXT",
                  "description": "Gene model annotations and/or known transcripts. No need to include this input, except in case of using \"on the fly\" annotations."
                },
                {
                  "label": "Set exons feature",
                  "required": false,
                  "description": "Feature type in GTF file to be used as exons for building transcripts.",
                  "sbg:category": "Splice junctions database",
                  "type": [
                    "null",
                    "string"
                  ],
                  "id": "#sjdbGTFfeatureExon",
                  "sbg:toolDefaultValue": "exon"
                },
                {
                  "label": "Chromosome names",
                  "required": false,
                  "description": "Prefix for chromosome names in a GTF file (e.g. 'chr' for using ENSMEBL annotations with UCSC geneomes).",
                  "sbg:category": "Splice junctions database",
                  "type": [
                    "null",
                    "string"
                  ],
                  "id": "#sjdbGTFchrPrefix",
                  "sbg:toolDefaultValue": "-"
                },
                {
                  "label": "Search start point normalized",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--seedSearchStartLmaxOverLread",
                    "sbg:cmdInclude": true
                  },
                  "description": "seedSearchStartLmax normalized to read length (sum of mates' lengths for paired-end reads).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "float"
                  ],
                  "id": "#seedSearchStartLmaxOverLread",
                  "sbg:toolDefaultValue": "1.0"
                },
                {
                  "label": "Search start point",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--seedSearchStartLmax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Defines the search start point through the read - the read is split into pieces no longer than this value (int>0).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#seedSearchStartLmax",
                  "sbg:toolDefaultValue": "50"
                },
                {
                  "label": "Max seed length",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--seedSearchLmax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Defines the maximum length of the seeds, if =0 max seed length is infinite (int>=0).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#seedSearchLmax",
                  "sbg:toolDefaultValue": "0"
                },
                {
                  "label": "Max seeds per window",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--seedPerWindowNmax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Max number of seeds per window (int>=0).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#seedPerWindowNmax",
                  "sbg:toolDefaultValue": "50"
                },
                {
                  "label": "Max seeds per read",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--seedPerReadNmax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Max number of seeds per read (int>=0).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#seedPerReadNmax",
                  "sbg:toolDefaultValue": "1000"
                },
                {
                  "label": "Max one-seed loci per window",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--seedNoneLociPerWindow",
                    "sbg:cmdInclude": true
                  },
                  "description": "Max number of one seed loci per window (int>=0).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#seedNoneLociPerWindow",
                  "sbg:toolDefaultValue": "10"
                },
                {
                  "label": "Filter pieces for stitching",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--seedMultimapNmax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Only pieces that map fewer than this value are utilized in the stitching procedure (int>=0).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#seedMultimapNmax",
                  "sbg:toolDefaultValue": "10000"
                },
                {
                  "label": "Max score reduction",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--scoreStitchSJshift",
                    "sbg:cmdInclude": true
                  },
                  "description": "Maximum score reduction while searching for SJ boundaries in the stitching step.",
                  "sbg:category": "Scoring",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#scoreStitchSJshift",
                  "sbg:toolDefaultValue": "1"
                },
                {
                  "label": "Insertion Open Penalty",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--scoreInsOpen",
                    "sbg:cmdInclude": true
                  },
                  "description": "Insertion open penalty.",
                  "sbg:category": "Scoring",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#scoreInsOpen",
                  "sbg:toolDefaultValue": "-2"
                },
                {
                  "label": "Insertion extension penalty",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--scoreInsBase",
                    "sbg:cmdInclude": true
                  },
                  "description": "Insertion extension penalty per base (in addition to --scoreInsOpen).",
                  "sbg:category": "Scoring",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#scoreInsBase",
                  "sbg:toolDefaultValue": "-2"
                },
                {
                  "label": "Log scaled score",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--scoreGenomicLengthLog2scale",
                    "sbg:cmdInclude": true
                  },
                  "description": "Extra score logarithmically scaled with genomic length of the alignment: <int>*log2(genomicLength).",
                  "sbg:category": "Scoring",
                  "type": [
                    "null",
                    "float"
                  ],
                  "id": "#scoreGenomicLengthLog2scale",
                  "sbg:toolDefaultValue": "-0.25"
                },
                {
                  "label": "Non-canonical gap open",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--scoreGapNoncan",
                    "sbg:cmdInclude": true
                  },
                  "description": "Non-canonical gap open penalty (in addition to --scoreGap).",
                  "sbg:category": "Scoring",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#scoreGapNoncan",
                  "sbg:toolDefaultValue": "-8"
                },
                {
                  "label": "GC/AG and CT/GC gap open",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--scoreGapGCAG",
                    "sbg:cmdInclude": true
                  },
                  "description": "GC/AG and CT/GC gap open penalty (in addition to --scoreGap).",
                  "sbg:category": "Scoring",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#scoreGapGCAG",
                  "sbg:toolDefaultValue": "-4"
                },
                {
                  "label": "AT/AC and GT/AT gap open",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--scoreGapATAC",
                    "sbg:cmdInclude": true
                  },
                  "description": "AT/AC and GT/AT gap open penalty (in addition to --scoreGap).",
                  "sbg:category": "Scoring",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#scoreGapATAC",
                  "sbg:toolDefaultValue": "-8"
                },
                {
                  "label": "Gap open penalty",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--scoreGap",
                    "sbg:cmdInclude": true
                  },
                  "description": "Gap open penalty.",
                  "sbg:category": "Scoring",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#scoreGap",
                  "sbg:toolDefaultValue": "0"
                },
                {
                  "label": "Deletion open penalty",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--scoreDelOpen",
                    "sbg:cmdInclude": true
                  },
                  "description": "Deletion open penalty.",
                  "sbg:category": "Scoring",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#scoreDelOpen",
                  "sbg:toolDefaultValue": "-2"
                },
                {
                  "label": "Deletion extension penalty",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--scoreDelBase",
                    "sbg:cmdInclude": true
                  },
                  "description": "Deletion extension penalty per base (in addition to --scoreDelOpen).",
                  "sbg:category": "Scoring",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#scoreDelBase",
                  "sbg:toolDefaultValue": "-2"
                },
                {
                  "label": "Sequencing center",
                  "required": false,
                  "description": "Specify the sequencing center for RG line.",
                  "sbg:category": "Read group",
                  "type": [
                    "null",
                    "string"
                  ],
                  "id": "#rg_seq_center",
                  "sbg:toolDefaultValue": "Inferred from metadata"
                },
                {
                  "label": "Sample ID",
                  "required": false,
                  "description": "Specify the sample ID for RG line.",
                  "sbg:category": "Read group",
                  "type": [
                    "null",
                    "string"
                  ],
                  "id": "#rg_sample_id",
                  "sbg:toolDefaultValue": "Inferred from metadata"
                },
                {
                  "label": "Platform unit ID",
                  "required": false,
                  "description": "Specify the platform unit ID for RG line.",
                  "sbg:category": "Read group",
                  "type": [
                    "null",
                    "string"
                  ],
                  "id": "#rg_platform_unit_id",
                  "sbg:toolDefaultValue": "Inferred from metadata"
                },
                {
                  "label": "Platform",
                  "required": false,
                  "description": "Specify the version of the technology that was used for sequencing or assaying.",
                  "sbg:category": "Read group",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "rg_platform",
                      "symbols": [
                        "LS 454",
                        "Helicos",
                        "Illumina",
                        "ABI SOLiD",
                        "Ion Torrent PGM",
                        "PacBio"
                      ]
                    }
                  ],
                  "id": "#rg_platform",
                  "sbg:toolDefaultValue": "Inferred from metadata"
                },
                {
                  "label": "Median fragment length",
                  "required": false,
                  "description": "Specify the median fragment length for RG line.",
                  "sbg:category": "Read group",
                  "type": [
                    "null",
                    "string"
                  ],
                  "id": "#rg_mfl",
                  "sbg:toolDefaultValue": "Inferred from metadata"
                },
                {
                  "label": "Library ID",
                  "required": false,
                  "description": "Specify the library ID for RG line.",
                  "sbg:category": "Read group",
                  "type": [
                    "null",
                    "string"
                  ],
                  "id": "#rg_library_id",
                  "sbg:toolDefaultValue": "Inferred from metadata"
                },
                {
                  "label": "Read sequence",
                  "required": true,
                  "inputBinding": {
                    "valueFrom": {
                      "class": "Expression",
                      "script": "{\t\n  var list = [].concat($job.inputs.reads)\n  \n  var resp = []\n  \n  if (list.length == 1){\n    resp.push(list[0].path)\n    \n  }else if (list.length == 2){    \n    \n    left = \"\"\n    right = \"\"\n      \n    for (index = 0; index < list.length; ++index) {\n      \n      if (list[index].metadata != null){\n        if (list[index].metadata.paired_end == 1){\n          left = list[index].path\n        }else if (list[index].metadata.paired_end == 2){\n          right = list[index].path\n        }\n      }\n    }\n    \n    if (left != \"\" && right != \"\"){      \n      resp.push(left)\n      resp.push(right)\n    }\n  }\n  else if (list.length > 2){\n    left = []\n    right = []\n      \n    for (index = 0; index < list.length; ++index) {\n      \n      if (list[index].metadata != null){\n        if (list[index].metadata.paired_end == 1){\n          left.push(list[index].path)\n        }else if (list[index].metadata.paired_end == 2){\n          right.push(list[index].path)\n        }\n      }\n    }\n    left_join = left.join()\n    right_join = right.join()\n    if (left != [] && right != []){      \n      resp.push(left_join)\n      resp.push(right_join)\n    }\t\n  }\n  \n  if(resp.length > 0){    \n    return \"--readFilesIn \".concat(resp.join(\" \"))\n  }\n}",
                      "engine": "#cwl-js-engine"
                    },
                    "separate": true,
                    "position": 10,
                    "sbg:cmdInclude": true,
                    "itemSeparator": " "
                  },
                  "sbg:category": "Basic",
                  "type": [
                    {
                      "type": "array",
                      "items": "File",
                      "name": "reads"
                    }
                  ],
                  "id": "#reads",
                  "sbg:fileTypes": "FASTA, FASTQ, FA, FQ, FASTQ.GZ, FQ.GZ, FASTQ.BZ2, FQ.BZ2",
                  "description": "Read sequence."
                },
                {
                  "label": "Reads lengths",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--readMatesLengthsIn",
                    "sbg:cmdInclude": true
                  },
                  "description": "Equal/Not equal - lengths of names, sequences, qualities for both mates are the same/not the same. \"Not equal\" is safe in all situations.",
                  "sbg:category": "Read parameters",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "readMatesLengthsIn",
                      "symbols": [
                        "NotEqual",
                        "Equal"
                      ]
                    }
                  ],
                  "id": "#readMatesLengthsIn",
                  "sbg:toolDefaultValue": "NotEqual"
                },
                {
                  "label": "Reads to map",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--readMapNumber",
                    "sbg:cmdInclude": true
                  },
                  "description": "Number of reads to map from the beginning of the file.",
                  "sbg:category": "Read parameters",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#readMapNumber",
                  "sbg:toolDefaultValue": "-1"
                },
                {
                  "label": "Prohibit alignment type",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--quantTranscriptomeBan",
                    "sbg:cmdInclude": true
                  },
                  "description": "Prohibit various alignment type. IndelSoftclipSingleend: prohibit indels, soft clipping and single-end alignments - compatible with RSEM; Singleend: prohibit single-end alignments.",
                  "sbg:category": "Quantification of Annotations",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "quantTranscriptomeBan",
                      "symbols": [
                        "IndelSoftclipSingleend",
                        "Singleend"
                      ]
                    }
                  ],
                  "id": "#quantTranscriptomeBan",
                  "sbg:toolDefaultValue": "IndelSoftclipSingleend"
                },
                {
                  "label": "Quantification mode",
                  "required": false,
                  "description": "Types of quantification requested. 'TranscriptomeSAM' option outputs SAM/BAM alignments to transcriptome into a separate file. With 'GeneCounts' option, STAR will count number of reads per gene while mapping.",
                  "sbg:category": "Quantification of Annotations",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "quantMode",
                      "symbols": [
                        "TranscriptomeSAM",
                        "GeneCounts"
                      ]
                    }
                  ],
                  "id": "#quantMode",
                  "sbg:toolDefaultValue": "-"
                },
                {
                  "label": "Output sorting type",
                  "required": false,
                  "description": "Type of output sorting.",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "outSortingType",
                      "symbols": [
                        "Unsorted",
                        "SortedByCoordinate",
                        "Unsorted SortedByCoordinate"
                      ]
                    }
                  ],
                  "id": "#outSortingType",
                  "sbg:toolDefaultValue": "SortedByCoordinate"
                },
                {
                  "label": "Collapsed junctions reads",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSJfilterReads",
                    "sbg:cmdInclude": true
                  },
                  "description": "Which reads to consider for collapsed splice junctions output. All: all reads, unique- and multi-mappers; Unique: uniquely mapping reads only.",
                  "sbg:category": "Output filtering: splice junctions",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "outSJfilterReads",
                      "symbols": [
                        "All",
                        "Unique"
                      ]
                    }
                  ],
                  "id": "#outSJfilterReads",
                  "sbg:toolDefaultValue": "All"
                },
                {
                  "label": "Min overhang SJ",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSJfilterOverhangMin",
                    "sbg:cmdInclude": true,
                    "itemSeparator": " "
                  },
                  "description": "Minimum overhang length for splice junctions on both sides for each of the motifs. To set no output for desired motif, assign -1 to the corresponding field. Does not apply to annotated junctions.",
                  "sbg:category": "Output filtering: splice junctions",
                  "type": [
                    "null",
                    {
                      "type": "array",
                      "items": "int"
                    }
                  ],
                  "id": "#outSJfilterOverhangMin",
                  "sbg:toolDefaultValue": "30 12 12 12"
                },
                {
                  "label": "Max gap allowed",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSJfilterIntronMaxVsReadN",
                    "sbg:cmdInclude": true,
                    "itemSeparator": " "
                  },
                  "description": "Maximum gap allowed for junctions supported by 1,2,3...N reads (int >= 0) i.e. by default junctions supported by 1 read can have gaps <=50000b, by 2 reads: <=100000b, by 3 reads: <=200000. By 4 or more reads: any gap <=alignIntronMax. Does not apply to annotated junctions.",
                  "sbg:category": "Output filtering: splice junctions",
                  "type": [
                    "null",
                    {
                      "type": "array",
                      "items": "int"
                    }
                  ],
                  "id": "#outSJfilterIntronMaxVsReadN",
                  "sbg:toolDefaultValue": "50000 100000 200000"
                },
                {
                  "label": "Min distance to other donor/acceptor",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSJfilterDistToOtherSJmin",
                    "sbg:cmdInclude": true,
                    "itemSeparator": " "
                  },
                  "description": "Minimum allowed distance to other junctions' donor/acceptor for each of the motifs (int >= 0). Does not apply to annotated junctions.",
                  "sbg:category": "Output filtering: splice junctions",
                  "type": [
                    "null",
                    {
                      "type": "array",
                      "items": "int"
                    }
                  ],
                  "id": "#outSJfilterDistToOtherSJmin",
                  "sbg:toolDefaultValue": "10 0 5 10"
                },
                {
                  "label": "Min unique count",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSJfilterCountUniqueMin",
                    "sbg:cmdInclude": true,
                    "itemSeparator": " "
                  },
                  "description": "Minimum uniquely mapping read count per junction for each of the motifs. To set no output for desired motif, assign -1 to the corresponding field. Junctions are output if one of --outSJfilterCountUniqueMin OR --outSJfilterCountTotalMin conditions are satisfied. Does not apply to annotated junctions.",
                  "sbg:category": "Output filtering: splice junctions",
                  "type": [
                    "null",
                    {
                      "type": "array",
                      "items": "int"
                    }
                  ],
                  "id": "#outSJfilterCountUniqueMin",
                  "sbg:toolDefaultValue": "3 1 1 1"
                },
                {
                  "label": "Min total count",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSJfilterCountTotalMin",
                    "sbg:cmdInclude": true,
                    "itemSeparator": " "
                  },
                  "description": "Minimum total (multi-mapping+unique) read count per junction for each of the motifs. To set no output for desired motif, assign -1 to the corresponding field. Junctions are output if one of --outSJfilterCountUniqueMin OR --outSJfilterCountTotalMin conditions are satisfied. Does not apply to annotated junctions.",
                  "sbg:category": "Output filtering: splice junctions",
                  "type": [
                    "null",
                    {
                      "type": "array",
                      "items": "int"
                    }
                  ],
                  "id": "#outSJfilterCountTotalMin",
                  "sbg:toolDefaultValue": "3 1 1 1"
                },
                {
                  "label": "Write unmapped in SAM",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSAMunmapped",
                    "sbg:cmdInclude": true
                  },
                  "description": "Output of unmapped reads in the SAM format. None: no output Within: output unmapped reads within the main SAM file (i.e. Aligned.out.sam).",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "outSAMunmapped",
                      "symbols": [
                        "None",
                        "Within"
                      ]
                    }
                  ],
                  "id": "#outSAMunmapped",
                  "sbg:toolDefaultValue": "None"
                },
                {
                  "label": "Output format",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "sbg:cmdInclude": true,
                    "valueFrom": {
                      "class": "Expression",
                      "script": "{\n  SAM_type = $job.inputs.outSAMtype\n  SORT_type = $job.inputs.outSortingType\n  if (SAM_type && SORT_type) {\n    return \"--outSAMtype \".concat(SAM_type, \" \", SORT_type)\n  }\n}",
                      "engine": "#cwl-js-engine"
                    }
                  },
                  "description": "Format of output alignments.",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "outSAMtype",
                      "symbols": [
                        "SAM",
                        "BAM"
                      ]
                    }
                  ],
                  "id": "#outSAMtype",
                  "sbg:toolDefaultValue": "SAM"
                },
                {
                  "label": "Strand field flag",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSAMstrandField",
                    "sbg:cmdInclude": true
                  },
                  "description": "Cufflinks-like strand field flag. None: not used; intronMotif: strand derived from the intron motif. Reads with inconsistent and/or non-canonical introns are filtered out.",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "outSAMstrandField",
                      "symbols": [
                        "None",
                        "intronMotif"
                      ]
                    }
                  ],
                  "id": "#outSAMstrandField",
                  "sbg:toolDefaultValue": "None"
                },
                {
                  "label": "Read ID",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSAMreadID",
                    "sbg:cmdInclude": true
                  },
                  "description": "Read ID record type. Standard: first word (until space) from the FASTx read ID line, removing /1,/2 from the end; Number: read number (index) in the FASTx file.",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "outSAMreadID",
                      "symbols": [
                        "Standard",
                        "Number"
                      ]
                    }
                  ],
                  "id": "#outSAMreadID",
                  "sbg:toolDefaultValue": "Standard"
                },
                {
                  "label": "Primary alignments",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSAMprimaryFlag",
                    "sbg:cmdInclude": true
                  },
                  "description": "Which alignments are considered primary - all others will be marked with 0x100 bit in the FLAG. OneBestScore: only one alignment with the best score is primary; AllBestScore: all alignments with the best score are primary.",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "outSAMprimaryFlag",
                      "symbols": [
                        "OneBestScore",
                        "AllBestScore"
                      ]
                    }
                  ],
                  "id": "#outSAMprimaryFlag",
                  "sbg:toolDefaultValue": "OneBestScore"
                },
                {
                  "label": "Sorting in SAM",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSAMorder",
                    "sbg:cmdInclude": true
                  },
                  "description": "Type of sorting for the SAM output. Paired: one mate after the other for all paired alignments; PairedKeepInputOrder: one mate after the other for all paired alignments, the order is kept the same as in the input FASTQ files.",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "outSAMorder",
                      "symbols": [
                        "Paired",
                        "PairedKeepInputOrder"
                      ]
                    }
                  ],
                  "id": "#outSAMorder",
                  "sbg:toolDefaultValue": "Paired"
                },
                {
                  "label": "SAM mode",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSAMmode",
                    "sbg:cmdInclude": true
                  },
                  "description": "Mode of SAM output. Full: full SAM output; NoQS: full SAM but without quality scores.",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "outSAMmode",
                      "symbols": [
                        "Full",
                        "NoQS"
                      ]
                    }
                  ],
                  "id": "#outSAMmode",
                  "sbg:toolDefaultValue": "Full"
                },
                {
                  "label": "MAPQ value",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSAMmapqUnique",
                    "sbg:cmdInclude": true
                  },
                  "description": "MAPQ value for unique mappers (0 to 255).",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#outSAMmapqUnique",
                  "sbg:toolDefaultValue": "255"
                },
                {
                  "label": "SAM header @PG",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSAMheaderPG",
                    "sbg:cmdInclude": true
                  },
                  "description": "Extra @PG (software) line of the SAM header (in addition to STAR).",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    "string"
                  ],
                  "id": "#outSAMheaderPG",
                  "sbg:toolDefaultValue": "-"
                },
                {
                  "label": "SAM header @HD",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSAMheaderHD",
                    "sbg:cmdInclude": true
                  },
                  "description": "@HD (header) line of the SAM header.",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    "string"
                  ],
                  "id": "#outSAMheaderHD",
                  "sbg:toolDefaultValue": "-"
                },
                {
                  "label": "OR SAM flag",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSAMflagOR",
                    "sbg:cmdInclude": true
                  },
                  "description": "Set specific bits of the SAM FLAG.",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#outSAMflagOR",
                  "sbg:toolDefaultValue": "0"
                },
                {
                  "label": "AND SAM flag",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSAMflagAND",
                    "sbg:cmdInclude": true
                  },
                  "description": "Set specific bits of the SAM FLAG.",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#outSAMflagAND",
                  "sbg:toolDefaultValue": "65535"
                },
                {
                  "label": "SAM attributes",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outSAMattributes",
                    "sbg:cmdInclude": true
                  },
                  "description": "Desired SAM attributes, in the order desired for the output SAM. NH: any combination in any order; Standard: NH HI AS nM; All: NH HI AS nM NM MD jM jI; None: no attributes.",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "outSAMattributes",
                      "symbols": [
                        "Standard",
                        "NH",
                        "All",
                        "None"
                      ]
                    }
                  ],
                  "id": "#outSAMattributes",
                  "sbg:toolDefaultValue": "Standard"
                },
                {
                  "label": "Output unmapped reads",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outReadsUnmapped",
                    "sbg:cmdInclude": true
                  },
                  "description": "Output of unmapped reads (besides SAM). None: no output; Fastx: output in separate fasta/fastq files, Unmapped.out.mate1/2.",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "outReadsUnmapped",
                      "symbols": [
                        "None",
                        "Fastx"
                      ]
                    }
                  ],
                  "id": "#outReadsUnmapped",
                  "sbg:toolDefaultValue": "None"
                },
                {
                  "label": "Quality conversion",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outQSconversionAdd",
                    "sbg:cmdInclude": true
                  },
                  "description": "Add this number to the quality score (e.g. to convert from Illumina to Sanger, use -31).",
                  "sbg:category": "Output",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#outQSconversionAdd",
                  "sbg:toolDefaultValue": "0"
                },
                {
                  "label": "Filtering type",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outFilterType",
                    "sbg:cmdInclude": true
                  },
                  "description": "Type of filtering. Normal: standard filtering using only current alignment; BySJout: keep only those reads that contain junctions that passed filtering into SJ.out.tab.",
                  "sbg:category": "Output filtering",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "outFilterType",
                      "symbols": [
                        "Normal",
                        "BySJout"
                      ]
                    }
                  ],
                  "id": "#outFilterType",
                  "sbg:toolDefaultValue": "Normal"
                },
                {
                  "label": "Min score normalized",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outFilterScoreMinOverLread",
                    "sbg:cmdInclude": true
                  },
                  "description": "'Minimum score' normalized to read length (sum of mates' lengths for paired-end reads).",
                  "sbg:category": "Output filtering",
                  "type": [
                    "null",
                    "float"
                  ],
                  "id": "#outFilterScoreMinOverLread",
                  "sbg:toolDefaultValue": "0.66"
                },
                {
                  "label": "Min score",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outFilterScoreMin",
                    "sbg:cmdInclude": true
                  },
                  "description": "Alignment will be output only if its score is higher than this value.",
                  "sbg:category": "Output filtering",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#outFilterScoreMin",
                  "sbg:toolDefaultValue": "0"
                },
                {
                  "label": "Multimapping score range",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outFilterMultimapScoreRange",
                    "sbg:cmdInclude": true
                  },
                  "description": "The score range below the maximum score for multimapping alignments.",
                  "sbg:category": "Output filtering",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#outFilterMultimapScoreRange",
                  "sbg:toolDefaultValue": "1"
                },
                {
                  "label": "Max number of mappings",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outFilterMultimapNmax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Read alignments will be output only if the read maps fewer than this value, otherwise no alignments will be output.",
                  "sbg:category": "Output filtering",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#outFilterMultimapNmax",
                  "sbg:toolDefaultValue": "10"
                },
                {
                  "label": "Mismatches to *read* length",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outFilterMismatchNoverReadLmax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Alignment will be output only if its ratio of mismatches to *read* length is less than this value.",
                  "sbg:category": "Output filtering",
                  "type": [
                    "null",
                    "float"
                  ],
                  "id": "#outFilterMismatchNoverReadLmax",
                  "sbg:toolDefaultValue": "1"
                },
                {
                  "label": "Mismatches to *mapped* length",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outFilterMismatchNoverLmax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Alignment will be output only if its ratio of mismatches to *mapped* length is less than this value.",
                  "sbg:category": "Output filtering",
                  "type": [
                    "null",
                    "float"
                  ],
                  "id": "#outFilterMismatchNoverLmax",
                  "sbg:toolDefaultValue": "0.3"
                },
                {
                  "label": "Max number of mismatches",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outFilterMismatchNmax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Alignment will be output only if it has fewer mismatches than this value.",
                  "sbg:category": "Output filtering",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#outFilterMismatchNmax",
                  "sbg:toolDefaultValue": "10"
                },
                {
                  "label": "Min matched bases normalized",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outFilterMatchNminOverLread",
                    "sbg:cmdInclude": true
                  },
                  "description": "'Minimum matched bases' normalized to read length (sum of mates lengths for paired-end reads).",
                  "sbg:category": "Output filtering",
                  "type": [
                    "null",
                    "float"
                  ],
                  "id": "#outFilterMatchNminOverLread",
                  "sbg:toolDefaultValue": "0.66"
                },
                {
                  "label": "Min matched bases",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outFilterMatchNmin",
                    "sbg:cmdInclude": true
                  },
                  "description": "Alignment will be output only if the number of matched bases is higher than this value.",
                  "sbg:category": "Output filtering",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#outFilterMatchNmin",
                  "sbg:toolDefaultValue": "0"
                },
                {
                  "label": "Motifs filtering",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--outFilterIntronMotifs",
                    "sbg:cmdInclude": true
                  },
                  "description": "Filter alignment using their motifs. None: no filtering; RemoveNoncanonical: filter out alignments that contain non-canonical junctions; RemoveNoncanonicalUnannotated: filter out alignments that contain non-canonical unannotated junctions when using annotated splice junctions database. The annotated non-canonical junctions will be kept.",
                  "sbg:category": "Output filtering",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "outFilterIntronMotifs",
                      "symbols": [
                        "None",
                        "RemoveNoncanonical",
                        "RemoveNoncanonicalUnannotated"
                      ]
                    }
                  ],
                  "id": "#outFilterIntronMotifs",
                  "sbg:toolDefaultValue": "None"
                },
                {
                  "label": "Max insert junctions",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--limitSjdbInsertNsj",
                    "sbg:cmdInclude": true
                  },
                  "description": "Maximum number of junction to be inserted to the genome on the fly at the mapping stage, including those from annotations and those detected in the 1st step of the 2-pass run.",
                  "sbg:category": "Limits",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#limitSjdbInsertNsj",
                  "sbg:toolDefaultValue": "1000000"
                },
                {
                  "label": "Junctions max number",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--limitOutSJoneRead",
                    "sbg:cmdInclude": true
                  },
                  "description": "Max number of junctions for one read (including all multi-mappers).",
                  "sbg:category": "Limits",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#limitOutSJoneRead",
                  "sbg:toolDefaultValue": "1000"
                },
                {
                  "label": "Collapsed junctions max number",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--limitOutSJcollapsed",
                    "sbg:cmdInclude": true
                  },
                  "description": "Max number of collapsed junctions.",
                  "sbg:category": "Limits",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#limitOutSJcollapsed",
                  "sbg:toolDefaultValue": "1000000"
                },
                {
                  "label": "Limit BAM sorting memory",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--limitBAMsortRAM",
                    "sbg:cmdInclude": true
                  },
                  "description": "Maximum available RAM for sorting BAM. If set to 0, it will be set to the genome index size.",
                  "sbg:category": "Limits",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#limitBAMsortRAM",
                  "sbg:toolDefaultValue": "0"
                },
                {
                  "label": "Genome dir name",
                  "required": false,
                  "inputBinding": {
                    "prefix": "--genomeDir",
                    "sbg:cmdInclude": true,
                    "position": 0,
                    "separate": true,
                    "valueFrom": {
                      "class": "Expression",
                      "script": "$job.inputs.genomeDirName || \"genomeDir\"",
                      "engine": "#cwl-js-engine"
                    }
                  },
                  "description": "Name of the directory which contains genome files (when genome.tar is uncompressed).",
                  "sbg:category": "Basic",
                  "type": [
                    "null",
                    "string"
                  ],
                  "id": "#genomeDirName",
                  "sbg:toolDefaultValue": "genomeDir"
                },
                {
                  "label": "Genome files",
                  "required": true,
                  "sbg:category": "Basic",
                  "type": [
                    "File"
                  ],
                  "id": "#genome",
                  "sbg:fileTypes": "TAR",
                  "description": "Genome files created using STAR Genome Generate."
                },
                {
                  "label": "Clip 5p bases",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--clip5pNbases",
                    "sbg:cmdInclude": true,
                    "itemSeparator": " "
                  },
                  "description": "Number of bases to clip from 5p of each mate. In case only one value is given, it will be assumed the same for both mates.",
                  "sbg:category": "Read parameters",
                  "type": [
                    "null",
                    {
                      "type": "array",
                      "items": "int"
                    }
                  ],
                  "id": "#clip5pNbases",
                  "sbg:toolDefaultValue": "0"
                },
                {
                  "label": "Clip 3p bases",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--clip3pNbases",
                    "sbg:cmdInclude": true,
                    "itemSeparator": " "
                  },
                  "description": "Number of bases to clip from 3p of each mate. In case only one value is given, it will be assumed the same for both mates.",
                  "sbg:category": "Read parameters",
                  "type": [
                    "null",
                    {
                      "type": "array",
                      "items": "int"
                    }
                  ],
                  "id": "#clip3pNbases",
                  "sbg:toolDefaultValue": "0"
                },
                {
                  "label": "Clip 3p after adapter seq.",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--clip3pAfterAdapterNbases",
                    "sbg:cmdInclude": true,
                    "itemSeparator": " "
                  },
                  "description": "Number of bases to clip from 3p of each mate after the adapter clipping. In case only one value is given, it will be assumed the same for both mates.",
                  "sbg:category": "Read parameters",
                  "type": [
                    "null",
                    {
                      "type": "array",
                      "items": "int"
                    }
                  ],
                  "id": "#clip3pAfterAdapterNbases",
                  "sbg:toolDefaultValue": "0"
                },
                {
                  "label": "Clip 3p adapter sequence",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--clip3pAdapterSeq",
                    "sbg:cmdInclude": true,
                    "itemSeparator": " "
                  },
                  "description": "Adapter sequence to clip from 3p of each mate. In case only one value is given, it will be assumed the same for both mates.",
                  "sbg:category": "Read parameters",
                  "type": [
                    "null",
                    {
                      "type": "array",
                      "items": "string"
                    }
                  ],
                  "id": "#clip3pAdapterSeq",
                  "sbg:toolDefaultValue": "-"
                },
                {
                  "label": "Max mismatches proportions",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--clip3pAdapterMMp",
                    "sbg:cmdInclude": true,
                    "itemSeparator": " "
                  },
                  "description": "Max proportion of mismatches for 3p adapter clipping for each mate. In case only one value is given, it will be assumed the same for both mates.",
                  "sbg:category": "Read parameters",
                  "type": [
                    "null",
                    {
                      "type": "array",
                      "items": "float"
                    }
                  ],
                  "id": "#clip3pAdapterMMp",
                  "sbg:toolDefaultValue": "0.1"
                },
                {
                  "label": "Min segment length",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--chimSegmentMin",
                    "sbg:cmdInclude": true
                  },
                  "description": "Minimum length of chimeric segment length, if =0, no chimeric output (int>=0).",
                  "sbg:category": "Chimeric Alignments",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#chimSegmentMin",
                  "sbg:toolDefaultValue": "15"
                },
                {
                  "label": "Min separation score",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--chimScoreSeparation",
                    "sbg:cmdInclude": true
                  },
                  "description": "Minimum difference (separation) between the best chimeric score and the next one (int>=0).",
                  "sbg:category": "Chimeric Alignments",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#chimScoreSeparation",
                  "sbg:toolDefaultValue": "10"
                },
                {
                  "label": "Min total score",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--chimScoreMin",
                    "sbg:cmdInclude": true
                  },
                  "description": "Minimum total (summed) score of the chimeric segments (int>=0).",
                  "sbg:category": "Chimeric Alignments",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#chimScoreMin",
                  "sbg:toolDefaultValue": "0"
                },
                {
                  "label": "Non-GT/AG penalty",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--chimScoreJunctionNonGTAG",
                    "sbg:cmdInclude": true
                  },
                  "description": "Penalty for a non-GT/AG chimeric junction.",
                  "sbg:category": "Chimeric Alignments",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#chimScoreJunctionNonGTAG",
                  "sbg:toolDefaultValue": "-1"
                },
                {
                  "label": "Max drop score",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--chimScoreDropMax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Max drop (difference) of chimeric score (the sum of scores of all chimeric segements) from the read length (int>=0).",
                  "sbg:category": "Chimeric Alignments",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#chimScoreDropMax",
                  "sbg:toolDefaultValue": "20"
                },
                {
                  "label": "Chimeric output type",
                  "required": false,
                  "description": "Type of chimeric output. SeparateSAMold: output old SAM into separate Chimeric.out.sam file; Within: output into main aligned SAM/BAM files.",
                  "sbg:category": "Chimeric Alignments",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "chimOutType",
                      "symbols": [
                        "SeparateSAMold",
                        "Within"
                      ]
                    }
                  ],
                  "id": "#chimOutType",
                  "sbg:toolDefaultValue": "SeparateSAMold"
                },
                {
                  "label": "Min junction overhang",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--chimJunctionOverhangMin",
                    "sbg:cmdInclude": true
                  },
                  "description": "Minimum overhang for a chimeric junction (int>=0).",
                  "sbg:category": "Chimeric Alignments",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#chimJunctionOverhangMin",
                  "sbg:toolDefaultValue": "20"
                },
                {
                  "label": "Max windows per read",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--alignWindowsPerReadNmax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Max number of windows per read (int>0).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "float"
                  ],
                  "id": "#alignWindowsPerReadNmax",
                  "sbg:toolDefaultValue": "10000"
                },
                {
                  "label": "Max transcripts per window",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--alignTranscriptsPerWindowNmax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Max number of transcripts per window (int>0).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#alignTranscriptsPerWindowNmax",
                  "sbg:toolDefaultValue": "100"
                },
                {
                  "label": "Max transcripts per read",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--alignTranscriptsPerReadNmax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Max number of different alignments per read to consider (int>0).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#alignTranscriptsPerReadNmax",
                  "sbg:toolDefaultValue": "10000"
                },
                {
                  "label": "Min mapped length normalized",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--alignSplicedMateMapLminOverLmate",
                    "sbg:cmdInclude": true
                  },
                  "description": "alignSplicedMateMapLmin normalized to mate length (float>0).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "float"
                  ],
                  "id": "#alignSplicedMateMapLminOverLmate",
                  "sbg:toolDefaultValue": "0.66"
                },
                {
                  "label": "Min mapped length",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--alignSplicedMateMapLmin",
                    "sbg:cmdInclude": true
                  },
                  "description": "Minimum mapped length for a read mate that is spliced (int>0).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#alignSplicedMateMapLmin",
                  "sbg:toolDefaultValue": "0"
                },
                {
                  "label": "Soft clipping",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--alignSoftClipAtReferenceEnds",
                    "sbg:cmdInclude": true
                  },
                  "description": "Option which allows soft clipping of alignments at the reference (chromosome) ends. Can be disabled for compatibility with Cufflinks/Cuffmerge. Yes: Enables soft clipping; No: Disables soft clipping.",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "alignSoftClipAtReferenceEnds",
                      "symbols": [
                        "Yes",
                        "No"
                      ]
                    }
                  ],
                  "id": "#alignSoftClipAtReferenceEnds",
                  "sbg:toolDefaultValue": "Yes"
                },
                {
                  "label": "Min overhang",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--alignSJoverhangMin",
                    "sbg:cmdInclude": true
                  },
                  "description": "Minimum overhang (i.e. block size) for spliced alignments (int>0).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#alignSJoverhangMin",
                  "sbg:toolDefaultValue": "5"
                },
                {
                  "label": "Min overhang: annotated",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--alignSJDBoverhangMin",
                    "sbg:cmdInclude": true
                  },
                  "description": "Minimum overhang (i.e. block size) for annotated (sjdb) spliced alignments (int>0).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#alignSJDBoverhangMin",
                  "sbg:toolDefaultValue": "3"
                },
                {
                  "label": "Max mates gap",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--alignMatesGapMax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Maximum gap between two mates, if 0, max intron gap will be determined by (2^winBinNbits)*winAnchorDistNbins.",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#alignMatesGapMax",
                  "sbg:toolDefaultValue": "0"
                },
                {
                  "label": "Min intron size",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--alignIntronMin",
                    "sbg:cmdInclude": true
                  },
                  "description": "Minimum intron size: genomic gap is considered intron if its length >= alignIntronMin, otherwise it is considered Deletion (int>=0).",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#alignIntronMin",
                  "sbg:toolDefaultValue": "21"
                },
                {
                  "label": "Max intron size",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--alignIntronMax",
                    "sbg:cmdInclude": true
                  },
                  "description": "Maximum intron size, if 0, max intron size will be determined by (2^winBinNbits)*winAnchorDistNbins.",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#alignIntronMax",
                  "sbg:toolDefaultValue": "0"
                },
                {
                  "label": "Alignment type",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--alignEndsType",
                    "sbg:cmdInclude": true
                  },
                  "description": "Type of read ends alignment. Local: standard local alignment with soft-clipping allowed. EndToEnd: force end to end read alignment, do not soft-clip.",
                  "sbg:category": "Alignments and Seeding",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "alignEndsType",
                      "symbols": [
                        "Local",
                        "EndToEnd"
                      ]
                    }
                  ],
                  "id": "#alignEndsType",
                  "sbg:toolDefaultValue": "Local"
                }
              ],
              "description": "STAR is an ultrafast universal RNA-seq aligner. It has very high mapping speed, accurate alignment of contiguous and spliced reads, detection of polyA-tails, non-canonical splices and chimeric (fusion) junctions. It works with reads starting from lengths ~15 bases up to ~300 bases. In case of having longer reads, use of STAR Long is recommended.",
              "class": "CommandLineTool",
              "y": 323,
              "sbg:revisionsInfo": [
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 0,
                  "sbg:modifiedOn": 1450911471
                },
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 1,
                  "sbg:modifiedOn": 1450911473
                },
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 2,
                  "sbg:modifiedOn": 1450911475
                },
                {
                  "sbg:modifiedBy": "uros_sipetic",
                  "sbg:revision": 3,
                  "sbg:modifiedOn": 1462878528
                },
                {
                  "sbg:modifiedBy": "ana_d",
                  "sbg:revision": 4,
                  "sbg:modifiedOn": 1462889222
                }
              ],
              "sbg:links": [
                {
                  "label": "Homepage",
                  "id": "https://github.com/alexdobin/STAR"
                },
                {
                  "label": "Releases",
                  "id": "https://github.com/alexdobin/STAR/releases"
                },
                {
                  "label": "Manual",
                  "id": "https://github.com/alexdobin/STAR/blob/master/doc/STARmanual.pdf"
                },
                {
                  "label": "Support",
                  "id": "https://groups.google.com/forum/#!forum/rna-star"
                },
                {
                  "label": "Publication",
                  "id": "http://www.ncbi.nlm.nih.gov/pubmed/23104886"
                }
              ],
              "baseCommand": [
                "tar",
                "-xvf",
                {
                  "class": "Expression",
                  "script": "$job.inputs.genome.path",
                  "engine": "#cwl-js-engine"
                },
                "&&",
                "/opt/STAR",
                "--runThreadN",
                {
                  "class": "Expression",
                  "script": "{\n  return $job.allocatedResources.cpu\n}",
                  "engine": "#cwl-js-engine"
                }
              ],
              "temporaryFailCodes": [],
              "sbg:cmdPreview": "tar -xvf genome.ext && /opt/STAR --runThreadN 15  --readFilesCommand bzcat  --sjdbGTFfile /demo/test-data/chr20.gtf  --sjdbGTFchrPrefix chrPrefix --sjdbInsertSave Basic  --twopass1readsN 0  --chimOutType WithinBAM  --outSAMattrRGline ID:1 CN:illumina PI:rg_mfl PL:Ion_Torrent_PGM PU:rg_platform_unit SM:rg_sample  --quantMode TranscriptomeSAM --outFileNamePrefix ./mate_1.fastq.bz2.  --readFilesIn /test-data/mate_1.fastq.bz2  && tar -vcf mate_1.fastq.bz2._STARgenome.tar ./mate_1.fastq.bz2._STARgenome  && mv mate_1.fastq.bz2.Unmapped.out.mate1 mate_1.fastq.bz2.Unmapped.out.mate1.fastq",
              "sbg:contributors": [
                "ana_d",
                "bix-demo",
                "uros_sipetic"
              ],
              "sbg:toolkit": "STAR"
            },
            "outputs": [
              {
                "id": "#STAR.unmapped_reads"
              },
              {
                "id": "#STAR.transcriptome_aligned_reads"
              },
              {
                "id": "#STAR.splice_junctions"
              },
              {
                "id": "#STAR.reads_per_gene"
              },
              {
                "id": "#STAR.log_files"
              },
              {
                "id": "#STAR.intermediate_genome"
              },
              {
                "id": "#STAR.chimeric_junctions"
              },
              {
                "id": "#STAR.chimeric_alignments"
              },
              {
                "id": "#STAR.aligned_reads"
              }
            ],
            "id": "#STAR",
            "inputs": [
              {
                "id": "#STAR.winFlankNbins"
              },
              {
                "id": "#STAR.winBinNbits"
              },
              {
                "id": "#STAR.winAnchorMultimapNmax"
              },
              {
                "id": "#STAR.winAnchorDistNbins"
              },
              {
                "id": "#STAR.twopassMode"
              },
              {
                "id": "#STAR.twopass1readsN"
              },
              {
                "id": "#STAR.sjdbScore"
              },
              {
                "id": "#STAR.sjdbOverhang",
                "default": 100
              },
              {
                "id": "#STAR.sjdbInsertSave"
              },
              {
                "id": "#STAR.sjdbGTFtagExonParentTranscript"
              },
              {
                "id": "#STAR.sjdbGTFtagExonParentGene"
              },
              {
                "id": "#STAR.sjdbGTFfile"
              },
              {
                "id": "#STAR.sjdbGTFfeatureExon"
              },
              {
                "id": "#STAR.sjdbGTFchrPrefix"
              },
              {
                "id": "#STAR.seedSearchStartLmaxOverLread"
              },
              {
                "id": "#STAR.seedSearchStartLmax"
              },
              {
                "id": "#STAR.seedSearchLmax"
              },
              {
                "id": "#STAR.seedPerWindowNmax"
              },
              {
                "id": "#STAR.seedPerReadNmax"
              },
              {
                "id": "#STAR.seedNoneLociPerWindow"
              },
              {
                "id": "#STAR.seedMultimapNmax"
              },
              {
                "id": "#STAR.scoreStitchSJshift"
              },
              {
                "id": "#STAR.scoreInsOpen"
              },
              {
                "id": "#STAR.scoreInsBase"
              },
              {
                "id": "#STAR.scoreGenomicLengthLog2scale"
              },
              {
                "id": "#STAR.scoreGapNoncan"
              },
              {
                "id": "#STAR.scoreGapGCAG"
              },
              {
                "id": "#STAR.scoreGapATAC"
              },
              {
                "id": "#STAR.scoreGap"
              },
              {
                "id": "#STAR.scoreDelOpen"
              },
              {
                "id": "#STAR.scoreDelBase"
              },
              {
                "id": "#STAR.rg_seq_center"
              },
              {
                "id": "#STAR.rg_sample_id"
              },
              {
                "id": "#STAR.rg_platform_unit_id"
              },
              {
                "id": "#STAR.rg_platform"
              },
              {
                "id": "#STAR.rg_mfl"
              },
              {
                "id": "#STAR.rg_library_id"
              },
              {
                "source": [
                  "#SBG_FASTQ_Quality_Detector.result"
                ],
                "id": "#STAR.reads"
              },
              {
                "id": "#STAR.readMatesLengthsIn"
              },
              {
                "id": "#STAR.readMapNumber"
              },
              {
                "id": "#STAR.quantTranscriptomeBan"
              },
              {
                "id": "#STAR.quantMode",
                "default": "TranscriptomeSAM"
              },
              {
                "id": "#STAR.outSortingType",
                "default": "SortedByCoordinate"
              },
              {
                "id": "#STAR.outSJfilterReads"
              },
              {
                "id": "#STAR.outSJfilterOverhangMin"
              },
              {
                "id": "#STAR.outSJfilterIntronMaxVsReadN"
              },
              {
                "id": "#STAR.outSJfilterDistToOtherSJmin"
              },
              {
                "id": "#STAR.outSJfilterCountUniqueMin"
              },
              {
                "id": "#STAR.outSJfilterCountTotalMin"
              },
              {
                "id": "#STAR.outSAMunmapped"
              },
              {
                "id": "#STAR.outSAMtype",
                "default": "BAM"
              },
              {
                "id": "#STAR.outSAMstrandField"
              },
              {
                "id": "#STAR.outSAMreadID"
              },
              {
                "id": "#STAR.outSAMprimaryFlag"
              },
              {
                "id": "#STAR.outSAMorder"
              },
              {
                "id": "#STAR.outSAMmode"
              },
              {
                "id": "#STAR.outSAMmapqUnique"
              },
              {
                "id": "#STAR.outSAMheaderPG"
              },
              {
                "id": "#STAR.outSAMheaderHD"
              },
              {
                "id": "#STAR.outSAMflagOR"
              },
              {
                "id": "#STAR.outSAMflagAND"
              },
              {
                "id": "#STAR.outSAMattributes"
              },
              {
                "id": "#STAR.outReadsUnmapped",
                "default": "Fastx"
              },
              {
                "id": "#STAR.outQSconversionAdd"
              },
              {
                "id": "#STAR.outFilterType"
              },
              {
                "id": "#STAR.outFilterScoreMinOverLread"
              },
              {
                "id": "#STAR.outFilterScoreMin"
              },
              {
                "id": "#STAR.outFilterMultimapScoreRange"
              },
              {
                "id": "#STAR.outFilterMultimapNmax"
              },
              {
                "id": "#STAR.outFilterMismatchNoverReadLmax"
              },
              {
                "id": "#STAR.outFilterMismatchNoverLmax"
              },
              {
                "id": "#STAR.outFilterMismatchNmax"
              },
              {
                "id": "#STAR.outFilterMatchNminOverLread"
              },
              {
                "id": "#STAR.outFilterMatchNmin"
              },
              {
                "id": "#STAR.outFilterIntronMotifs"
              },
              {
                "id": "#STAR.limitSjdbInsertNsj"
              },
              {
                "id": "#STAR.limitOutSJoneRead"
              },
              {
                "id": "#STAR.limitOutSJcollapsed"
              },
              {
                "id": "#STAR.limitBAMsortRAM"
              },
              {
                "id": "#STAR.genomeDirName"
              },
              {
                "source": [
                  "#genome"
                ],
                "id": "#STAR.genome"
              },
              {
                "id": "#STAR.clip5pNbases"
              },
              {
                "id": "#STAR.clip3pNbases"
              },
              {
                "id": "#STAR.clip3pAfterAdapterNbases"
              },
              {
                "id": "#STAR.clip3pAdapterSeq"
              },
              {
                "id": "#STAR.clip3pAdapterMMp"
              },
              {
                "id": "#STAR.chimSegmentMin"
              },
              {
                "id": "#STAR.chimScoreSeparation"
              },
              {
                "id": "#STAR.chimScoreMin"
              },
              {
                "id": "#STAR.chimScoreJunctionNonGTAG"
              },
              {
                "id": "#STAR.chimScoreDropMax"
              },
              {
                "id": "#STAR.chimOutType"
              },
              {
                "id": "#STAR.chimJunctionOverhangMin"
              },
              {
                "id": "#STAR.alignWindowsPerReadNmax"
              },
              {
                "id": "#STAR.alignTranscriptsPerWindowNmax"
              },
              {
                "id": "#STAR.alignTranscriptsPerReadNmax"
              },
              {
                "id": "#STAR.alignSplicedMateMapLminOverLmate"
              },
              {
                "id": "#STAR.alignSplicedMateMapLmin"
              },
              {
                "id": "#STAR.alignSoftClipAtReferenceEnds"
              },
              {
                "id": "#STAR.alignSJoverhangMin"
              },
              {
                "id": "#STAR.alignSJDBoverhangMin"
              },
              {
                "id": "#STAR.alignMatesGapMax"
              },
              {
                "id": "#STAR.alignIntronMin"
              },
              {
                "id": "#STAR.alignIntronMax"
              },
              {
                "id": "#STAR.alignEndsType"
              }
            ],
            "sbg:x": 623.9999999999999
          },
          {
            "sbg:y": 323.58331564068664,
            "run": {
              "sbg:modifiedBy": "bix-demo",
              "sbg:toolAuthor": "Seven Bridges Genomics",
              "sbg:license": "Apache License 2.0",
              "appUrl": "/public/apps/#tool/admin/sbg-public-data/sbg-fastq-quality-detector/3",
              "sbg:id": "admin/sbg-public-data/sbg-fastq-quality-detector/3",
              "x": 375.33331789572907,
              "temporaryFailCodes": [],
              "hints": [
                {
                  "dockerImageId": "",
                  "dockerPull": "images.sbgenomics.com/tziotas/sbg_fastq_quality_scale_detector:1.0",
                  "class": "DockerRequirement"
                },
                {
                  "value": 1,
                  "class": "sbg:CPURequirement"
                },
                {
                  "value": 1000,
                  "class": "sbg:MemRequirement"
                }
              ],
              "stdin": "",
              "sbg:createdBy": "bix-demo",
              "arguments": [],
              "label": "SBG FASTQ Quality Detector",
              "stdout": "",
              "sbg:sbgMaintained": false,
              "sbg:project": "bix-demo/sbgtools-demo",
              "sbg:categories": [
                "FASTQ-Processing"
              ],
              "id": "admin/sbg-public-data/sbg-fastq-quality-detector/3",
              "successCodes": [],
              "sbg:validationErrors": [],
              "outputs": [
                {
                  "label": "Result",
                  "outputBinding": {
                    "sbg:metadata": {},
                    "glob": "*.fastq"
                  },
                  "type": [
                    "null",
                    "File"
                  ],
                  "id": "#result",
                  "sbg:fileTypes": "FASTQ",
                  "description": "Source FASTQ file with updated metadata."
                }
              ],
              "sbg:revision": 3,
              "sbg:modifiedOn": 1450911314,
              "sbg:latestRevision": 3,
              "sbg:createdOn": 1450911312,
              "sbg:job": {
                "inputs": {
                  "fastq": {
                    "class": "File",
                    "secondaryFiles": [],
                    "size": 0,
                    "path": "/path/to/fastq.ext"
                  }
                },
                "allocatedResources": {
                  "cpu": 1,
                  "mem": 1000
                }
              },
              "inputs": [
                {
                  "label": "Fastq",
                  "required": true,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--fastq",
                    "sbg:cmdInclude": true
                  },
                  "type": [
                    "File"
                  ],
                  "id": "#fastq",
                  "description": "FASTQ file."
                }
              ],
              "description": "FASTQ Quality Scale Detector detects which quality encoding scheme was used in your reads and automatically enters the proper value in the \"Quality Scale\" metadata field.",
              "class": "CommandLineTool",
              "sbg:contributors": [
                "bix-demo"
              ],
              "sbg:revisionsInfo": [
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 0,
                  "sbg:modifiedOn": 1450911312
                },
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 3,
                  "sbg:modifiedOn": 1450911314
                },
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 1,
                  "sbg:modifiedOn": 1450911313
                },
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 2,
                  "sbg:modifiedOn": 1450911313
                }
              ],
              "requirements": [],
              "baseCommand": [
                "python",
                "/opt/sbg_fastq_quality_scale_detector.py"
              ],
              "sbg:cmdPreview": "python /opt/sbg_fastq_quality_scale_detector.py --fastq /path/to/fastq.ext /path/to/fastq.ext",
              "y": 323.58331564068664,
              "sbg:toolkit": "SBGTools"
            },
            "outputs": [
              {
                "id": "#SBG_FASTQ_Quality_Detector.result"
              }
            ],
            "id": "#SBG_FASTQ_Quality_Detector",
            "inputs": [
              {
                "source": [
                  "#fastq"
                ],
                "id": "#SBG_FASTQ_Quality_Detector.fastq"
              }
            ],
            "sbg:x": 375.33331789572907
          }
        ],
        "label": "RNA-seq Alignment - STAR",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mia.steinberg",
            "sbg:revision": 0,
            "sbg:revisionNotes": "Copy of mia.steinberg/mirna-sandbox/rna-seq-alignment-star/1",
            "sbg:modifiedOn": 1470060369
          },
          {
            "sbg:modifiedBy": "mia.steinberg",
            "sbg:revision": 1,
            "sbg:revisionNotes": "Copy of mia.steinberg/mirna-sandbox/rna-seq-alignment-star/2",
            "sbg:modifiedOn": 1470061380
          },
          {
            "sbg:modifiedBy": "mia.steinberg",
            "sbg:revision": 2,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1470149030
          },
          {
            "sbg:modifiedBy": "mia.steinberg",
            "sbg:revision": 3,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1470247745
          },
          {
            "sbg:modifiedBy": "mia.steinberg",
            "sbg:revision": 4,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1470247793
          }
        ],
        "sbg:sbgMaintained": false,
        "sbg:createdBy": "mia.steinberg",
        "sbg:canvas_zoom": 0.5999999999999996,
        "sbg:project": "mia.steinberg/mirna-analysis",
        "sbg:categories": [
          "Alignment",
          "RNA"
        ],
        "id": "mia.steinberg/mirna-analysis/rna-seq-alignment-star/4",
        "sbg:validationErrors": [],
        "sbg:revision": 4,
        "sbg:toolkitVersion": "2.4.2a",
        "sbg:modifiedOn": 1470247793,
        "sbg:latestRevision": 4,
        "sbg:createdOn": 1470060369,
        "sbg:license": "Apache License 2.0",
        "inputs": [
          {
            "label": "STAR genome index",
            "required": true,
            "sbg:y": 735.0000203450522,
            "type": [
              "File"
            ],
            "id": "#genome",
            "sbg:fileTypes": "TAR",
            "sbg:x": 171.6666463216142
          },
          {
            "sbg:includeInPorts": true,
            "label": "fastq",
            "required": true,
            "sbg:y": 323.74995018542,
            "type": [
              {
                "type": "array",
                "items": "File"
              }
            ],
            "id": "#fastq",
            "sbg:x": 164.24999140203002
          }
        ],
        "description": "Alignment to a reference genome and transcriptome presents the first step of RNA-Seq analysis. This pipeline uses STAR, an ultrafast RNA-seq aligner capable of mapping full length RNA sequences and detecting de novo canonical junctions, non-canonical splices, and chimeric (fusion) transcripts. It is optimized for mammalian sequence reads, but fine tuning of its parameters enables customization to satisfy unique needs.\n\nSTAR accepts one file per sample (or two files for paired-end data).  \nSplice junction annotations can optionally be collected from splice junction databases. Set the \"Overhang length\" parameter to a value larger than zero in order to use splice junction databases. For constant read length, this value should (ideally) be equal to mate length decreased by 1; for long reads with non-constant length, this value should be 100 (pipeline default). \nFastQC Analysis on FASTQ files reveals read length distribution. STAR can detect chimeric transcripts, but parameter \"Min segment length\" in \"Chimeric Alignments\" category must be adjusted to a desired minimum chimeric segment length. Aligned reads are reported in BAM format and can be viewed in a genome browser (such as IGV). A file containing detected splice junctions is also produced.\n\nUnmapped reads are reported in FASTQ format and can be included in an output BAM file. The \"Output unmapped reads\" and \"Write unmapped in SAM\" parameters enable unmapped output type selection.",
        "class": "Workflow",
        "sbg:contributors": [
          "mia.steinberg"
        ],
        "outputs": [
          {
            "sbg:includeInPorts": true,
            "label": "unmapped_reads",
            "sbg:y": 159.58330912391222,
            "required": false,
            "source": [
              "#STAR.unmapped_reads"
            ],
            "type": [
              "null",
              {
                "type": "array",
                "items": "File"
              }
            ],
            "id": "#unmapped_reads",
            "sbg:x": 766.2497863074045
          },
          {
            "sbg:includeInPorts": true,
            "label": "transcriptome_aligned_reads",
            "sbg:y": 86.58332158128358,
            "required": false,
            "source": [
              "#STAR.transcriptome_aligned_reads"
            ],
            "type": [
              "null",
              "File"
            ],
            "id": "#transcriptome_aligned_reads",
            "sbg:x": 1118.9998003244302
          },
          {
            "sbg:includeInPorts": true,
            "label": "splice_junctions",
            "sbg:y": 167.49997603893155,
            "required": false,
            "source": [
              "#STAR.splice_junctions"
            ],
            "type": [
              "null",
              "File"
            ],
            "id": "#splice_junctions",
            "sbg:x": 1282.3330177465928
          },
          {
            "sbg:includeInPorts": true,
            "label": "sorted_bam",
            "sbg:y": 557.2498435974195,
            "required": false,
            "source": [
              "#Picard_SortSam.sorted_bam"
            ],
            "type": [
              "null",
              "File"
            ],
            "id": "#sorted_bam",
            "sbg:x": 934.2498227655963
          },
          {
            "sbg:includeInPorts": true,
            "label": "reads_per_gene",
            "sbg:y": 245.74996398885858,
            "required": false,
            "source": [
              "#STAR.reads_per_gene"
            ],
            "type": [
              "null",
              "File"
            ],
            "id": "#reads_per_gene",
            "sbg:x": 1394.416355699286
          },
          {
            "sbg:includeInPorts": true,
            "label": "log_files",
            "sbg:y": 322.9999517997081,
            "required": false,
            "source": [
              "#STAR.log_files"
            ],
            "type": [
              "null",
              {
                "type": "array",
                "items": "File"
              }
            ],
            "id": "#log_files",
            "sbg:x": 1505.0830268959055
          },
          {
            "sbg:includeInPorts": true,
            "label": "intermediate_genome",
            "sbg:y": 386.0832876066342,
            "required": false,
            "source": [
              "#STAR.intermediate_genome"
            ],
            "type": [
              "null",
              "File"
            ],
            "id": "#intermediate_genome",
            "sbg:x": 1408.9164783457816
          },
          {
            "sbg:includeInPorts": true,
            "label": "chimeric_junctions",
            "sbg:y": 446.7499567170913,
            "required": false,
            "source": [
              "#STAR.chimeric_junctions"
            ],
            "type": [
              "null",
              "File"
            ],
            "id": "#chimeric_junctions",
            "sbg:x": 1278.7498061756194
          },
          {
            "sbg:includeInPorts": true,
            "label": "chimeric_alignments",
            "sbg:y": 503.2499285439613,
            "required": false,
            "source": [
              "#STAR.chimeric_alignments"
            ],
            "type": [
              "null",
              "File"
            ],
            "id": "#chimeric_alignments",
            "sbg:x": 1147.5831347604494
          }
        ],
        "hints": [
          {
            "value": "c3.8xlarge",
            "class": "sbg:AWSInstanceType"
          }
        ],
        "y": 138.71790959284863,
        "sbg:toolkit": "STAR"
      },
      "outputs": [
        {
          "id": "#RNA_seq_Alignment___STAR.unmapped_reads"
        },
        {
          "id": "#RNA_seq_Alignment___STAR.transcriptome_aligned_reads"
        },
        {
          "id": "#RNA_seq_Alignment___STAR.splice_junctions"
        },
        {
          "id": "#RNA_seq_Alignment___STAR.sorted_bam"
        },
        {
          "id": "#RNA_seq_Alignment___STAR.reads_per_gene"
        },
        {
          "id": "#RNA_seq_Alignment___STAR.log_files"
        },
        {
          "id": "#RNA_seq_Alignment___STAR.intermediate_genome"
        },
        {
          "id": "#RNA_seq_Alignment___STAR.chimeric_junctions"
        },
        {
          "id": "#RNA_seq_Alignment___STAR.chimeric_alignments"
        }
      ],
      "id": "#RNA_seq_Alignment___STAR",
      "inputs": [
        {
          "source": [
            "#genome"
          ],
          "id": "#RNA_seq_Alignment___STAR.genome"
        },
        {
          "source": [
            "#cutadapt.trimmed_fastq"
          ],
          "id": "#RNA_seq_Alignment___STAR.fastq"
        }
      ],
      "sbg:x": 629.2306283804089
    },
    {
      "sbg:y": 615.2692159016931,
      "run": {
        "sbg:modifiedBy": "mia.steinberg",
        "sbg:image_url": "https://brood.sbgenomics.com/static/mia.steinberg/mirna-analysis/fastqc-analysis/1.png",
        "sbg:canvas_y": 31,
        "sbg:id": "mia.steinberg/mirna-analysis/fastqc-analysis/1",
        "x": 1066.7693074544277,
        "requirements": [],
        "steps": [
          {
            "sbg:y": 361.00001513958,
            "run": {
              "sbg:modifiedBy": "mladenlSBG",
              "stdin": "",
              "sbg:license": "GNU General Public License v3.0 only",
              "appUrl": "/public/apps/#tool/admin/sbg-public-data/fastqc-0-11-4/12",
              "sbg:id": "admin/sbg-public-data/fastqc-0-11-4/12",
              "x": 417.33336008919673,
              "requirements": [
                {
                  "class": "ExpressionEngineRequirement",
                  "requirements": [
                    {
                      "dockerPull": "rabix/js-engine",
                      "class": "DockerRequirement"
                    }
                  ],
                  "id": "#cwl-js-engine"
                }
              ],
              "hints": [
                {
                  "dockerImageId": "759c4c8fbafd",
                  "dockerPull": "images.sbgenomics.com/mladenlsbg/fastqc:0.11.4",
                  "class": "DockerRequirement"
                },
                {
                  "value": {
                    "class": "Expression",
                    "script": "{\tif ($job.inputs.threads)\n{\n  return $job.inputs.threads\n}\n else\n {\n   return 1\n }\n}",
                    "engine": "#cwl-js-engine"
                  },
                  "class": "sbg:CPURequirement"
                },
                {
                  "value": 2048,
                  "class": "sbg:MemRequirement"
                }
              ],
              "sbg:image_url": null,
              "sbg:createdBy": "bix-demo",
              "arguments": [
                {
                  "separate": true,
                  "prefix": "",
                  "valueFrom": "--noextract"
                },
                {
                  "separate": true,
                  "prefix": "--outdir",
                  "valueFrom": "."
                }
              ],
              "label": "FastQC",
              "stdout": "",
              "sbg:sbgMaintained": false,
              "sbg:toolAuthor": "Babraham Institute",
              "sbg:project": "bix-demo/fastqc-0-11-4-demo",
              "sbg:categories": [
                "FASTQ-Processing",
                "Quality-Control",
                "Quantification"
              ],
              "id": "admin/sbg-public-data/fastqc-0-11-4/12",
              "successCodes": [],
              "sbg:validationErrors": [],
              "outputs": [
                {
                  "label": "Report zip",
                  "id": "#report_zip",
                  "outputBinding": {
                    "sbg:metadata": {
                      "__inherit__": "input_fastq"
                    },
                    "sbg:inheritMetadataFrom": "#input_fastq",
                    "glob": "*_fastqc.zip"
                  },
                  "type": [
                    "null",
                    "File"
                  ],
                  "fileTypes": "ZIP",
                  "sbg:fileTypes": "ZIP",
                  "description": "Zip archive of the report."
                }
              ],
              "sbg:revision": 4,
              "sbg:toolkitVersion": "0.11.4",
              "sbg:modifiedOn": 1465990120,
              "sbg:latestRevision": 4,
              "sbg:createdOn": 1450911593,
              "sbg:job": {
                "inputs": {
                  "quiet": true,
                  "threads": 0,
                  "input_fastq": {
                    "path": "/root/dir/example.fastq"
                  }
                },
                "allocatedResources": {
                  "cpu": 1,
                  "mem": 2048
                }
              },
              "inputs": [
                {
                  "label": "Threads",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--threads",
                    "sbg:cmdInclude": true,
                    "valueFrom": {
                      "class": "Expression",
                      "script": "{\tif ($job.inputs.threads)\n\t\t{\n  \t\t\treturn $job.inputs.threads\n\t\t}\n\telse\n \t\t{\n   \t\t\treturn 1\n \t\t}\n}",
                      "engine": "#cwl-js-engine"
                    }
                  },
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#threads",
                  "sbg:altPrefix": "-t",
                  "description": "Specifies the number of files which can be processed simultaneously.  Each thread will be allocated 250MB of memory so you shouldn't run more threads than your available memory will cope with, and not more than 6 threads on a 32 bit machine."
                },
                {
                  "label": "Quiet",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--quiet",
                    "sbg:cmdInclude": true
                  },
                  "type": [
                    "null",
                    "boolean"
                  ],
                  "id": "#quiet",
                  "sbg:altPrefix": "-q",
                  "description": "Supress all progress messages on stdout and only report errors."
                },
                {
                  "label": "Nogroup",
                  "required": false,
                  "inputBinding": {
                    "separate": false,
                    "prefix": "--nogroup",
                    "sbg:cmdInclude": true
                  },
                  "type": [
                    "null",
                    "boolean"
                  ],
                  "id": "#nogroup",
                  "description": "Disable grouping of bases for reads >50bp. All reports will show data for every base in the read.  WARNING: Using this option will cause fastqc to crash and burn if you use it on really long reads, and your plots may end up a ridiculous size. You have been warned."
                },
                {
                  "label": "Nano",
                  "required": false,
                  "inputBinding": {
                    "separate": false,
                    "prefix": "--nano",
                    "sbg:cmdInclude": true
                  },
                  "sbg:category": "",
                  "type": [
                    "null",
                    "boolean"
                  ],
                  "id": "#nano",
                  "description": "Files come from naopore sequences and are in fast5 format. In this mode you can pass in directories to process and the program will take in all fast5 files within those directories and produce a single output file from the sequences found in all files."
                },
                {
                  "label": "Limits",
                  "required": false,
                  "sbg:fileTypes": "TXT",
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--limits",
                    "sbg:cmdInclude": true
                  },
                  "type": [
                    "null",
                    "File"
                  ],
                  "id": "#limits_file",
                  "sbg:altPrefix": "-l",
                  "description": "Specifies a non-default file which contains a set of criteria which will be used to determine the warn/error limits for the various modules.  This file can also be used to selectively remove some modules from the output all together.  The format needs to mirror the default limits.txt file found in the Configuration folder."
                },
                {
                  "label": "Kmers",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--kmers",
                    "sbg:cmdInclude": true
                  },
                  "sbg:toolDefaultValue": "7",
                  "sbg:category": "",
                  "type": [
                    "null",
                    "int"
                  ],
                  "id": "#kmers",
                  "sbg:altPrefix": "-f",
                  "description": "Specifies the length of Kmer to look for in the Kmer content module. Specified Kmer length must be between 2 and 10. Default length is 7 if not specified."
                },
                {
                  "label": "Input file",
                  "required": true,
                  "inputBinding": {
                    "separate": true,
                    "position": 100,
                    "sbg:cmdInclude": true
                  },
                  "type": [
                    "File"
                  ],
                  "id": "#input_fastq",
                  "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ",
                  "description": "Input file."
                },
                {
                  "label": "Format",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--format",
                    "sbg:cmdInclude": true
                  },
                  "sbg:category": "",
                  "type": [
                    "null",
                    {
                      "type": "enum",
                      "name": "format",
                      "symbols": [
                        "bam",
                        "sam",
                        "bam_mapped",
                        "sam_mapped",
                        "fastq"
                      ]
                    }
                  ],
                  "id": "#format",
                  "sbg:altPrefix": "-f",
                  "description": "Bypasses the normal sequence file format detection and forces the program to use the specified format.  Valid formats are BAM, SAM, BAM_mapped, SAM_mapped and FASTQ."
                },
                {
                  "label": "Contaminants",
                  "required": false,
                  "sbg:fileTypes": "FASTA, FA, TXT",
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--contaminants",
                    "sbg:cmdInclude": true
                  },
                  "type": [
                    "null",
                    "File"
                  ],
                  "id": "#contaminants_file",
                  "sbg:altPrefix": "-c",
                  "description": "Specifies a non-default file which contains the list of contaminants to screen overrepresented sequences against. The file must contain sets of named contaminants in the form name[tab]sequence.  Lines prefixed with a hash will be ignored."
                },
                {
                  "label": "Casava",
                  "required": false,
                  "inputBinding": {
                    "separate": false,
                    "prefix": "--casava",
                    "sbg:cmdInclude": true
                  },
                  "sbg:category": "",
                  "type": [
                    "null",
                    "boolean"
                  ],
                  "id": "#casava",
                  "description": "Files come from raw casava output. Files in the same sample group (differing only by the group number) will be analysed as a set rather than individually. Sequences with the filter flag set in the header will be excluded from the analysis. Files must have the same names given to them by casava (including being gzipped and ending with .gz) otherwise they won't be grouped together correctly."
                },
                {
                  "label": "Adapters",
                  "required": false,
                  "sbg:fileTypes": "FASTA, FA",
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--adapters",
                    "sbg:cmdInclude": true
                  },
                  "type": [
                    "null",
                    "File"
                  ],
                  "id": "#adapters_file",
                  "sbg:altPrefix": "-a",
                  "description": "Specifies a non-default file which contains the list of adapter sequences which will be explicity searched against the library. The file must contain sets of named adapters in the form name[tab]sequence.  Lines prefixed with a hash will be ignored."
                }
              ],
              "description": "FastQC reads a set of sequence files and produces a quality control (QC) report from each one. These reports consist of a number of different modules, each of which will help identify a different type of potential problem in your data.\n\nFastQC is a tool which takes a FastQ file and runs a series of tests on it to generate a comprehensive QC report.  This report will tell you if there is anything unusual about your sequence.  Each test is flagged as a pass, warning, or fail depending on how far it departs from what you would expect from a normal large dataset with no significant biases.  It is important to stress that warnings or even failures do not necessarily mean that there is a problem with your data, only that it is unusual.  It is possible that the biological nature of your sample means that you would expect this particular bias in your results.",
              "class": "CommandLineTool",
              "y": 361.00001513958,
              "sbg:revisionsInfo": [
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 0,
                  "sbg:revisionNotes": null,
                  "sbg:modifiedOn": 1450911593
                },
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 1,
                  "sbg:revisionNotes": null,
                  "sbg:modifiedOn": 1450911593
                },
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 2,
                  "sbg:revisionNotes": null,
                  "sbg:modifiedOn": 1450911594
                },
                {
                  "sbg:modifiedBy": "mladenlSBG",
                  "sbg:revision": 3,
                  "sbg:revisionNotes": null,
                  "sbg:modifiedOn": 1459870965
                },
                {
                  "sbg:modifiedBy": "mladenlSBG",
                  "sbg:revision": 4,
                  "sbg:revisionNotes": null,
                  "sbg:modifiedOn": 1465990120
                }
              ],
              "sbg:links": [
                {
                  "label": "Homepage",
                  "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
                },
                {
                  "label": "Source Code",
                  "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4_source.zip"
                },
                {
                  "label": "Wiki",
                  "id": "https://wiki.hpcc.msu.edu/display/Bioinfo/FastQC+Tutorial"
                },
                {
                  "label": "Download",
                  "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4.zip"
                },
                {
                  "label": "Publication",
                  "id": ""
                }
              ],
              "baseCommand": [
                "fastqc"
              ],
              "temporaryFailCodes": [],
              "sbg:cmdPreview": "fastqc  --noextract --outdir .  /root/dir/example.fastq",
              "sbg:contributors": [
                "bix-demo",
                "mladenlSBG"
              ],
              "sbg:toolkit": "FastQC"
            },
            "outputs": [
              {
                "id": "#FastQC_1.report_zip"
              }
            ],
            "id": "#FastQC_1",
            "inputs": [
              {
                "id": "#FastQC_1.threads"
              },
              {
                "id": "#FastQC_1.quiet"
              },
              {
                "id": "#FastQC_1.nogroup"
              },
              {
                "id": "#FastQC_1.nano"
              },
              {
                "id": "#FastQC_1.limits_file"
              },
              {
                "id": "#FastQC_1.kmers"
              },
              {
                "source": [
                  "#FASTQ_Reads"
                ],
                "id": "#FastQC_1.input_fastq"
              },
              {
                "id": "#FastQC_1.format"
              },
              {
                "id": "#FastQC_1.contaminants_file"
              },
              {
                "id": "#FastQC_1.casava"
              },
              {
                "id": "#FastQC_1.adapters_file"
              }
            ],
            "sbg:x": 417.33336008919673
          },
          {
            "sbg:y": 271.66673882802587,
            "run": {
              "sbg:modifiedBy": "bix-demo",
              "stdin": "",
              "sbg:license": "Apache License 2.0",
              "appUrl": "/public/apps/#tool/admin/sbg-public-data/sbg-html2b64/5",
              "sbg:id": "admin/sbg-public-data/sbg-html2b64/5",
              "x": 571.6667501529085,
              "requirements": [],
              "hints": [
                {
                  "dockerImageId": "8c35d2a2d8d1",
                  "dockerPull": "images.sbgenomics.com/mladenlsbg/sbg-html-to-b64:1.0.1",
                  "class": "DockerRequirement"
                },
                {
                  "value": 1,
                  "class": "sbg:CPURequirement"
                },
                {
                  "value": 1000,
                  "class": "sbg:MemRequirement"
                }
              ],
              "sbg:image_url": null,
              "sbg:createdBy": "bix-demo",
              "arguments": [],
              "label": "SBG Html2b64",
              "stdout": "",
              "sbg:sbgMaintained": false,
              "sbg:toolAuthor": "Seven Bridges",
              "sbg:project": "bix-demo/sbgtools-demo",
              "sbg:categories": [
                "Converters",
                "Plotting-and-Rendering"
              ],
              "id": "admin/sbg-public-data/sbg-html2b64/5",
              "successCodes": [],
              "sbg:validationErrors": [],
              "outputs": [
                {
                  "label": "B64html",
                  "outputBinding": {
                    "sbg:metadata": {},
                    "sbg:inheritMetadataFrom": "#input_file",
                    "glob": "*b64html"
                  },
                  "type": [
                    "null",
                    "File"
                  ],
                  "id": "#b64html",
                  "sbg:fileTypes": "HTML, B64HTML",
                  "description": "Output file, b64html."
                }
              ],
              "sbg:revision": 2,
              "sbg:toolkitVersion": "1.0",
              "sbg:modifiedOn": 1459963571,
              "sbg:latestRevision": 2,
              "sbg:createdOn": 1450911294,
              "sbg:job": {
                "inputs": {
                  "input_file": {
                    "class": "File",
                    "secondaryFiles": [],
                    "size": 0,
                    "path": "input_file.ext"
                  }
                },
                "allocatedResources": {
                  "cpu": 1,
                  "mem": 1000
                }
              },
              "inputs": [
                {
                  "label": "Input file",
                  "required": false,
                  "inputBinding": {
                    "separate": true,
                    "prefix": "--input",
                    "sbg:cmdInclude": true
                  },
                  "sbg:category": "File input.",
                  "type": [
                    "null",
                    "File"
                  ],
                  "id": "#input_file",
                  "sbg:fileTypes": "ZIP",
                  "description": "Compressed archive."
                }
              ],
              "description": "Tool for converting archived html output of FastQC and similar tools to b64html so it can easily be displayed in web browsers or on SBG platform.",
              "class": "CommandLineTool",
              "y": 271.66673882802587,
              "sbg:revisionsInfo": [
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 0,
                  "sbg:revisionNotes": null,
                  "sbg:modifiedOn": 1450911294
                },
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 1,
                  "sbg:revisionNotes": null,
                  "sbg:modifiedOn": 1450911294
                },
                {
                  "sbg:modifiedBy": "bix-demo",
                  "sbg:revision": 2,
                  "sbg:revisionNotes": null,
                  "sbg:modifiedOn": 1459963571
                }
              ],
              "temporaryFailCodes": [],
              "baseCommand": [
                "python",
                "/opt/sbg_html_to_b64.py"
              ],
              "sbg:cmdPreview": "python /opt/sbg_html_to_b64.py",
              "sbg:contributors": [
                "bix-demo"
              ],
              "sbg:toolkit": "SBGTools"
            },
            "outputs": [
              {
                "id": "#SBG_Html2b64_1.b64html"
              }
            ],
            "id": "#SBG_Html2b64_1",
            "inputs": [
              {
                "source": [
                  "#FastQC_1.report_zip"
                ],
                "id": "#SBG_Html2b64_1.input_file"
              }
            ],
            "sbg:x": 571.6667501529085
          }
        ],
        "hints": [],
        "sbg:toolAuthor": "Seven Bridges",
        "sbg:canvas_zoom": 0.5999999999999996,
        "label": "FastQC Analysis",
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mia.steinberg",
            "sbg:revision": 0,
            "sbg:revisionNotes": "Copy of mia.steinberg/mirna-analysis-wf/fastqc-analysis/0",
            "sbg:modifiedOn": 1469815812
          },
          {
            "sbg:modifiedBy": "mia.steinberg",
            "sbg:revision": 1,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1470247849
          }
        ],
        "sbg:sbgMaintained": false,
        "sbg:createdBy": "mia.steinberg",
        "sbg:project": "mia.steinberg/mirna-analysis",
        "sbg:categories": [
          "Quality-Control",
          "FASTQ-Processing"
        ],
        "id": "mia.steinberg/mirna-analysis/fastqc-analysis/1",
        "sbg:validationErrors": [],
        "sbg:revision": 1,
        "sbg:toolkitVersion": "1",
        "sbg:modifiedOn": 1470247849,
        "sbg:latestRevision": 1,
        "sbg:createdOn": 1469815812,
        "sbg:license": "Apache License 2.0",
        "inputs": [
          {
            "sbg:includeInPorts": true,
            "label": "FASTQ Reads",
            "required": true,
            "sbg:y": 347.6667008267519,
            "type": [
              {
                "type": "array",
                "items": "File"
              }
            ],
            "id": "#FASTQ_Reads",
            "sbg:x": 190.666674176852
          }
        ],
        "description": "The FastQC tool, developed by the Babraham Institute, analyzes sequence data from FASTQ, BAM, or SAM files. It produces a set of metrics and charts that help identify technical problems with the data. \n\nUse this pipeline on files you receive from a sequencer or a collaborator to get a general idea of how well the sequencing experiment went. Results from this pipeline can inform if and how you should proceed with your analysis.",
        "class": "Workflow",
        "sbg:contributors": [
          "mia.steinberg"
        ],
        "sbg:links": [
          {
            "label": "Homepage",
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
          },
          {
            "label": "Documentation",
            "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/"
          }
        ],
        "outputs": [
          {
            "sbg:includeInPorts": true,
            "label": "Report ZIP",
            "sbg:y": 468.0002322197048,
            "required": false,
            "source": [
              "#FastQC_1.report_zip"
            ],
            "type": [
              "null",
              "File"
            ],
            "id": "#report_zip",
            "sbg:x": 625.6667522986758
          },
          {
            "sbg:includeInPorts": true,
            "label": "FastQC Charts",
            "sbg:y": 271.6668099694836,
            "required": false,
            "source": [
              "#SBG_Html2b64_1.b64html"
            ],
            "type": [
              "null",
              "File"
            ],
            "id": "#b64html",
            "sbg:x": 729.0004155900901
          }
        ],
        "sbg:canvas_x": 228,
        "y": 615.2692159016931,
        "sbg:toolkit": "SBGTools"
      },
      "outputs": [
        {
          "id": "#FastQC_Analysis.report_zip"
        },
        {
          "id": "#FastQC_Analysis.b64html"
        }
      ],
      "id": "#FastQC_Analysis",
      "inputs": [
        {
          "source": [
            "#cutadapt.trimmed_fastq"
          ],
          "id": "#FastQC_Analysis.FASTQ_Reads"
        }
      ],
      "sbg:x": 1066.7693074544277
    },
    {
      "sbg:y": 1015.555795522837,
      "run": {
        "sbg:modifiedBy": "mia.steinberg",
        "sbg:image_url": null,
        "sbg:id": "mia.steinberg/mirna-analysis/mirdeep-core/1",
        "x": 1053.9139498197121,
        "temporaryFailCodes": [],
        "hints": [
          {
            "value": 4,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 96000,
            "class": "sbg:MemRequirement"
          },
          {
            "dockerImageId": "",
            "dockerPull": "miasteinberg/cap-mirseq:latest",
            "class": "DockerRequirement"
          },
          {
            "value": "r3.4xlarge",
            "class": "sbg:AWSInstanceType"
          }
        ],
        "stdin": "",
        "sbg:createdBy": "mia.steinberg",
        "arguments": [
          {
            "separate": true,
            "position": 5,
            "valueFrom": "none"
          },
          {
            "separate": true,
            "position": 10,
            "valueFrom": "-P"
          },
          {
            "separate": true,
            "position": 11,
            "prefix": "-t",
            "valueFrom": "Human"
          }
        ],
        "label": "mirdeep-core",
        "stdout": "",
        "class": "CommandLineTool",
        "sbg:project": "mia.steinberg/mirna-analysis",
        "id": "mia.steinberg/mirna-analysis/mirdeep-core/1",
        "successCodes": [],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "type": [
              "null",
              "File"
            ],
            "id": "#result_csv",
            "outputBinding": {
              "glob": "result*.csv"
            }
          },
          {
            "type": [
              "null",
              "File"
            ],
            "id": "#result_bed",
            "sbg:fileTypes": "BED",
            "outputBinding": {
              "glob": "result*.bed"
            }
          },
          {
            "type": [
              "null",
              "File"
            ],
            "id": "#miRNAs_expressed",
            "outputBinding": {
              "glob": "*miRNAs_expressed*"
            }
          },
          {
            "type": [
              "null",
              "File"
            ],
            "id": "#miRDeep_result_report",
            "sbg:fileTypes": "HTML",
            "outputBinding": {
              "glob": "result*.html"
            }
          },
          {
            "type": [
              "null",
              "File"
            ],
            "id": "#miRDeep_expression_report",
            "sbg:fileTypes": "HTML",
            "outputBinding": {
              "glob": "expression*.html"
            }
          },
          {
            "type": [
              "null",
              "File"
            ],
            "id": "#error_log",
            "outputBinding": {
              "glob": "error*.log"
            }
          }
        ],
        "sbg:revision": 1,
        "sbg:modifiedOn": 1470322680,
        "sbg:latestRevision": 1,
        "sbg:createdOn": 1469815795,
        "sbg:job": {
          "inputs": {
            "reads_fa": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/reads.fa"
            },
            "hairpin": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/hairpin.fa"
            },
            "reference_genome": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/hg19_bowtie.fa"
            },
            "mature": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/mature.fa"
            },
            "mapped_arf": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/reads_vs_genome.arf"
            }
          },
          "allocatedResources": {
            "cpu": 4,
            "mem": 96000
          }
        },
        "inputs": [
          {
            "label": "reference genome fasta",
            "required": false,
            "inputBinding": {
              "separate": true,
              "position": 2,
              "sbg:cmdInclude": true
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#reference_genome",
            "sbg:fileTypes": "FA, FASTA"
          },
          {
            "label": "mapped reads fa",
            "required": false,
            "inputBinding": {
              "separate": true,
              "position": 1,
              "sbg:cmdInclude": true
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#reads_fa",
            "sbg:fileTypes": "FA"
          },
          {
            "label": "mirbase mature sequences",
            "required": false,
            "inputBinding": {
              "separate": true,
              "position": 4,
              "sbg:cmdInclude": true
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#mature",
            "sbg:fileTypes": "FA, FASTA"
          },
          {
            "label": "reads vs genome arf",
            "required": false,
            "inputBinding": {
              "separate": true,
              "position": 3,
              "sbg:cmdInclude": true
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#mapped_arf",
            "sbg:fileTypes": "ARF"
          },
          {
            "label": "mirbase hairpin sequences",
            "required": false,
            "inputBinding": {
              "separate": true,
              "position": 6,
              "sbg:cmdInclude": true
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#hairpin",
            "sbg:fileTypes": "FA, FASTA"
          }
        ],
        "description": "",
        "sbg:sbgMaintained": false,
        "sbg:contributors": [
          "mia.steinberg"
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mia.steinberg",
            "sbg:revision": 0,
            "sbg:revisionNotes": "Copy of mia.steinberg/mirna-analysis-wf/mirdeep-core/0",
            "sbg:modifiedOn": 1469815795
          },
          {
            "sbg:modifiedBy": "mia.steinberg",
            "sbg:revision": 1,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1470322680
          }
        ],
        "requirements": [
          {
            "class": "sbg:Metadata"
          }
        ],
        "baseCommand": [
          "miRDeep2.pl"
        ],
        "sbg:cmdPreview": "miRDeep2.pl  none  -P -t Human",
        "y": 1015.555795522837
      },
      "outputs": [
        {
          "id": "#mirdeep_core.result_csv"
        },
        {
          "id": "#mirdeep_core.result_bed"
        },
        {
          "id": "#mirdeep_core.miRNAs_expressed"
        },
        {
          "id": "#mirdeep_core.miRDeep_result_report"
        },
        {
          "id": "#mirdeep_core.miRDeep_expression_report"
        },
        {
          "id": "#mirdeep_core.error_log"
        }
      ],
      "id": "#mirdeep_core",
      "inputs": [
        {
          "source": [
            "#reference_genome"
          ],
          "id": "#mirdeep_core.reference_genome"
        },
        {
          "source": [
            "#mirdeep2_mapper.mapped_reads"
          ],
          "id": "#mirdeep_core.reads_fa"
        },
        {
          "source": [
            "#mature"
          ],
          "id": "#mirdeep_core.mature"
        },
        {
          "source": [
            "#mirdeep2_mapper.reads_vs_genome"
          ],
          "id": "#mirdeep_core.mapped_arf"
        },
        {
          "source": [
            "#hairpin"
          ],
          "id": "#mirdeep_core.hairpin"
        }
      ],
      "sbg:x": 1053.9139498197121
    },
    {
      "sbg:y": 345.62819260817326,
      "run": {
        "sbg:modifiedBy": "mia.steinberg",
        "sbg:image_url": null,
        "sbg:id": "mia.steinberg/mirna-analysis/cutadapt/1",
        "x": 296.4615337665266,
        "temporaryFailCodes": [],
        "hints": [
          {
            "value": 1,
            "class": "sbg:CPURequirement"
          },
          {
            "value": 1000,
            "class": "sbg:MemRequirement"
          },
          {
            "dockerImageId": "",
            "dockerPull": "miasteinberg/trim-galore:latest",
            "class": "DockerRequirement"
          }
        ],
        "stdin": "",
        "sbg:createdBy": "mia.steinberg",
        "arguments": [
          {
            "separate": true,
            "position": 2,
            "prefix": "-o",
            "valueFrom": {
              "class": "Expression",
              "script": "{\n  filepath = $job.inputs.fastq.path\n  filename = filepath.split(\"/\").pop()\n  sample = filename.split(\".\")[0]\n    \n  new_filename = sample + \".trimmed.fastq\"\n  \n  return new_filename;\n}",
              "engine": "#cwl-js-engine"
            }
          }
        ],
        "label": "cutadapt",
        "stdout": {
          "class": "Expression",
          "script": "{\n  filepath = $job.inputs.fastq.path\n  filename = filepath.split(\"/\").pop()\n  sample = filename.split(\".\")[0]\n    \n  new_filename = sample + \".cutadapt.log\"\n  \n  return new_filename;\n}",
          "engine": "#cwl-js-engine"
        },
        "class": "CommandLineTool",
        "sbg:project": "mia.steinberg/mirna-analysis",
        "id": "mia.steinberg/mirna-analysis/cutadapt/1",
        "successCodes": [],
        "sbg:validationErrors": [],
        "outputs": [
          {
            "label": "Trimmed reads",
            "fileTypes": "fastq",
            "outputBinding": {
              "glob": "*trimmed.fastq",
              "sbg:inheritMetadataFrom": "#FASTQC_fastq",
              "loadContents": false
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#trimmed_fastq",
            "description": "QCed file with trimmed adapters"
          },
          {
            "type": [
              "null",
              "File"
            ],
            "id": "#cutadapt_log",
            "outputBinding": {
              "glob": "*cutadapt.log"
            }
          }
        ],
        "sbg:revision": 1,
        "sbg:modifiedOn": 1470322589,
        "sbg:latestRevision": 1,
        "sbg:createdOn": 1469815803,
        "sbg:job": {
          "inputs": {
            "fastq": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/sample.fastq.gz"
            },
            "adapter": {
              "class": "File",
              "secondaryFiles": [],
              "size": 0,
              "path": "/path/to/adapters.fa"
            }
          },
          "allocatedResources": {
            "cpu": 1,
            "mem": 1000
          }
        },
        "inputs": [
          {
            "label": "input file",
            "required": false,
            "inputBinding": {
              "sbg:cmdInclude": true,
              "position": 10,
              "separate": false,
              "itemSeparator": null,
              "loadContents": false
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#fastq",
            "sbg:fileTypes": "FASTQ.GZ",
            "description": "The raw FASTQ from the sequencer"
          },
          {
            "label": "adapter_sequences",
            "required": false,
            "inputBinding": {
              "separate": false,
              "position": 1,
              "prefix": "-b file:",
              "sbg:cmdInclude": true
            },
            "type": [
              "null",
              "File"
            ],
            "id": "#adapter",
            "sbg:fileTypes": "FA",
            "description": "FASTA of adapters"
          }
        ],
        "description": "",
        "sbg:sbgMaintained": false,
        "sbg:contributors": [
          "mia.steinberg"
        ],
        "sbg:revisionsInfo": [
          {
            "sbg:modifiedBy": "mia.steinberg",
            "sbg:revision": 0,
            "sbg:revisionNotes": "Copy of mia.steinberg/mirna-analysis-wf/cutadapt/1",
            "sbg:modifiedOn": 1469815803
          },
          {
            "sbg:modifiedBy": "mia.steinberg",
            "sbg:revision": 1,
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1470322589
          }
        ],
        "requirements": [
          {
            "class": "ExpressionEngineRequirement",
            "requirements": [
              {
                "dockerPull": "rabix/js-engine",
                "class": "DockerRequirement"
              }
            ],
            "id": "#cwl-js-engine"
          }
        ],
        "baseCommand": [
          "cutadapt"
        ],
        "sbg:cmdPreview": "cutadapt -o sample.trimmed.fastq > sample.cutadapt.log",
        "y": 345.62819260817326
      },
      "outputs": [
        {
          "id": "#cutadapt.trimmed_fastq"
        },
        {
          "id": "#cutadapt.cutadapt_log"
        }
      ],
      "id": "#cutadapt",
      "inputs": [
        {
          "source": [
            "#fastq"
          ],
          "id": "#cutadapt.fastq"
        },
        {
          "source": [
            "#adapter"
          ],
          "id": "#cutadapt.adapter"
        }
      ],
      "sbg:x": 296.4615337665266
    }
  ],
  "sbg:contributors": [
    "dave"
  ]
}
